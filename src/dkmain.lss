
dkmain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000020a6  0000213a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042f  00800158  00800158  00002192  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006718  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f26  00000000  00000000  00008c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003acd  00000000  00000000  0000abb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a60  00000000  00000000  0000e680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000272a  00000000  00000000  0000f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004109  00000000  00000000  0001180a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00015913  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ae c2       	rjmp	.+1372   	; 0x55e <__ctors_end>
       2:	00 00       	nop
       4:	c8 c2       	rjmp	.+1424   	; 0x596 <__bad_interrupt>
       6:	00 00       	nop
       8:	c6 c2       	rjmp	.+1420   	; 0x596 <__bad_interrupt>
       a:	00 00       	nop
       c:	c4 c2       	rjmp	.+1416   	; 0x596 <__bad_interrupt>
       e:	00 00       	nop
      10:	c2 c2       	rjmp	.+1412   	; 0x596 <__bad_interrupt>
      12:	00 00       	nop
      14:	c0 c2       	rjmp	.+1408   	; 0x596 <__bad_interrupt>
      16:	00 00       	nop
      18:	be c2       	rjmp	.+1404   	; 0x596 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bc c2       	rjmp	.+1400   	; 0x596 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ba c2       	rjmp	.+1396   	; 0x596 <__bad_interrupt>
      22:	00 00       	nop
      24:	b8 c2       	rjmp	.+1392   	; 0x596 <__bad_interrupt>
      26:	00 00       	nop
      28:	59 c7       	rjmp	.+3762   	; 0xedc <__vector_10>
      2a:	00 00       	nop
      2c:	b4 c2       	rjmp	.+1384   	; 0x596 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b2 c2       	rjmp	.+1380   	; 0x596 <__bad_interrupt>
      32:	00 00       	nop
      34:	b0 c2       	rjmp	.+1376   	; 0x596 <__bad_interrupt>
      36:	00 00       	nop
      38:	ae c2       	rjmp	.+1372   	; 0x596 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ac c2       	rjmp	.+1368   	; 0x596 <__bad_interrupt>
      3e:	00 00       	nop
      40:	aa c2       	rjmp	.+1364   	; 0x596 <__bad_interrupt>
      42:	00 00       	nop
      44:	a8 c2       	rjmp	.+1360   	; 0x596 <__bad_interrupt>
      46:	00 00       	nop
      48:	a6 c2       	rjmp	.+1356   	; 0x596 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a4 c2       	rjmp	.+1352   	; 0x596 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a2 c2       	rjmp	.+1348   	; 0x596 <__bad_interrupt>
      52:	00 00       	nop
      54:	a0 c2       	rjmp	.+1344   	; 0x596 <__bad_interrupt>
      56:	00 00       	nop
      58:	9e c2       	rjmp	.+1340   	; 0x596 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9c c2       	rjmp	.+1336   	; 0x596 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9a c2       	rjmp	.+1332   	; 0x596 <__bad_interrupt>
      62:	00 00       	nop
      64:	98 c2       	rjmp	.+1328   	; 0x596 <__bad_interrupt>
      66:	00 00       	nop
      68:	96 c2       	rjmp	.+1324   	; 0x596 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	94 c2       	rjmp	.+1320   	; 0x596 <__bad_interrupt>
      6e:	00 00       	nop
      70:	92 c2       	rjmp	.+1316   	; 0x596 <__bad_interrupt>
      72:	00 00       	nop
      74:	90 c2       	rjmp	.+1312   	; 0x596 <__bad_interrupt>
      76:	00 00       	nop
      78:	8e c2       	rjmp	.+1308   	; 0x596 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8c c2       	rjmp	.+1304   	; 0x596 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8a c2       	rjmp	.+1300   	; 0x596 <__bad_interrupt>
      82:	00 00       	nop
      84:	88 c2       	rjmp	.+1296   	; 0x596 <__bad_interrupt>
      86:	00 00       	nop
      88:	86 c2       	rjmp	.+1292   	; 0x596 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	84 c2       	rjmp	.+1288   	; 0x596 <__bad_interrupt>
      8e:	00 00       	nop
      90:	82 c2       	rjmp	.+1284   	; 0x596 <__bad_interrupt>
      92:	00 00       	nop
      94:	80 c2       	rjmp	.+1280   	; 0x596 <__bad_interrupt>
      96:	00 00       	nop
      98:	7e c2       	rjmp	.+1276   	; 0x596 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7c c2       	rjmp	.+1272   	; 0x596 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	7a c2       	rjmp	.+1268   	; 0x596 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	78 c2       	rjmp	.+1264   	; 0x596 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	76 c2       	rjmp	.+1260   	; 0x596 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <__trampolines_end>:
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 81       	ld	r16, Z
      b2:	81 18       	sub	r8, r1
      b4:	81 81       	ldd	r24, Z+1	; 0x01
      b6:	00 07       	cpc	r16, r16
      b8:	00 07       	cpc	r16, r16
      ba:	00 14       	cp	r0, r0
      bc:	7f 14       	cp	r7, r15
      be:	7f 14       	cp	r7, r15
      c0:	24 2a       	or	r2, r20
      c2:	7f 2a       	or	r7, r31
      c4:	12 23       	and	r17, r18
      c6:	13 08       	sbc	r1, r3
      c8:	64 62       	ori	r22, 0x24	; 36
      ca:	36 49       	sbci	r19, 0x96	; 150
      cc:	55 22       	and	r5, r21
      ce:	50 00       	.word	0x0050	; ????
      d0:	05 03       	mulsu	r16, r21
      d2:	00 00       	nop
      d4:	00 1c       	adc	r0, r0
      d6:	22 41       	sbci	r18, 0x12	; 18
      d8:	00 00       	nop
      da:	41 22       	and	r4, r17
      dc:	1c 00       	.word	0x001c	; ????
      de:	14 08       	sbc	r1, r4
      e0:	3e 08       	sbc	r3, r14
      e2:	14 08       	sbc	r1, r4
      e4:	08 3e       	cpi	r16, 0xE8	; 232
      e6:	08 08       	sbc	r0, r8
      e8:	00 50       	subi	r16, 0x00	; 0
      ea:	30 00       	.word	0x0030	; ????
      ec:	00 08       	sbc	r0, r0
      ee:	08 08       	sbc	r0, r8
      f0:	08 08       	sbc	r0, r8
      f2:	00 60       	ori	r16, 0x00	; 0
      f4:	60 00       	.word	0x0060	; ????
      f6:	00 20       	and	r0, r0
      f8:	10 08       	sbc	r1, r0
      fa:	04 02       	muls	r16, r20
      fc:	3e 51       	subi	r19, 0x1E	; 30
      fe:	49 45       	sbci	r20, 0x59	; 89
     100:	3e 00       	.word	0x003e	; ????
     102:	42 7f       	andi	r20, 0xF2	; 242
     104:	40 00       	.word	0x0040	; ????
     106:	42 61       	ori	r20, 0x12	; 18
     108:	51 49       	sbci	r21, 0x91	; 145
     10a:	46 21       	and	r20, r6
     10c:	41 45       	sbci	r20, 0x51	; 81
     10e:	4b 31       	cpi	r20, 0x1B	; 27
     110:	18 14       	cp	r1, r8
     112:	12 7f       	andi	r17, 0xF2	; 242
     114:	10 27       	eor	r17, r16
     116:	45 45       	sbci	r20, 0x55	; 85
     118:	45 39       	cpi	r20, 0x95	; 149
     11a:	3c 4a       	sbci	r19, 0xAC	; 172
     11c:	49 49       	sbci	r20, 0x99	; 153
     11e:	30 01       	movw	r6, r0
     120:	71 09       	sbc	r23, r1
     122:	05 03       	mulsu	r16, r21
     124:	36 49       	sbci	r19, 0x96	; 150
     126:	49 49       	sbci	r20, 0x99	; 153
     128:	36 06       	cpc	r3, r22
     12a:	49 49       	sbci	r20, 0x99	; 153
     12c:	29 1e       	adc	r2, r25
     12e:	00 36       	cpi	r16, 0x60	; 96
     130:	36 00       	.word	0x0036	; ????
     132:	00 00       	nop
     134:	56 36       	cpi	r21, 0x66	; 102
     136:	00 00       	nop
     138:	08 14       	cp	r0, r8
     13a:	22 41       	sbci	r18, 0x12	; 18
     13c:	00 14       	cp	r0, r0
     13e:	14 14       	cp	r1, r4
     140:	14 14       	cp	r1, r4
     142:	00 41       	sbci	r16, 0x10	; 16
     144:	22 14       	cp	r2, r2
     146:	08 02       	muls	r16, r24
     148:	01 51       	subi	r16, 0x11	; 17
     14a:	09 06       	cpc	r0, r25
     14c:	32 49       	sbci	r19, 0x92	; 146
     14e:	79 41       	sbci	r23, 0x19	; 25
     150:	3e 7e       	andi	r19, 0xEE	; 238
     152:	11 11       	cpse	r17, r1
     154:	11 7e       	andi	r17, 0xE1	; 225
     156:	7f 49       	sbci	r23, 0x9F	; 159
     158:	49 49       	sbci	r20, 0x99	; 153
     15a:	36 3e       	cpi	r19, 0xE6	; 230
     15c:	41 41       	sbci	r20, 0x11	; 17
     15e:	41 22       	and	r4, r17
     160:	7f 41       	sbci	r23, 0x1F	; 31
     162:	41 22       	and	r4, r17
     164:	1c 7f       	andi	r17, 0xFC	; 252
     166:	49 49       	sbci	r20, 0x99	; 153
     168:	49 41       	sbci	r20, 0x19	; 25
     16a:	7f 09       	sbc	r23, r15
     16c:	09 09       	sbc	r16, r9
     16e:	01 3e       	cpi	r16, 0xE1	; 225
     170:	41 49       	sbci	r20, 0x91	; 145
     172:	49 7a       	andi	r20, 0xA9	; 169
     174:	7f 08       	sbc	r7, r15
     176:	08 08       	sbc	r0, r8
     178:	7f 00       	.word	0x007f	; ????
     17a:	41 7f       	andi	r20, 0xF1	; 241
     17c:	41 00       	.word	0x0041	; ????
     17e:	20 40       	sbci	r18, 0x00	; 0
     180:	41 3f       	cpi	r20, 0xF1	; 241
     182:	01 7f       	andi	r16, 0xF1	; 241
     184:	08 14       	cp	r0, r8
     186:	22 41       	sbci	r18, 0x12	; 18
     188:	7f 40       	sbci	r23, 0x0F	; 15
     18a:	40 40       	sbci	r20, 0x00	; 0
     18c:	40 7f       	andi	r20, 0xF0	; 240
     18e:	02 0c       	add	r0, r2
     190:	02 7f       	andi	r16, 0xF2	; 242
     192:	7f 04       	cpc	r7, r15
     194:	08 10       	cpse	r0, r8
     196:	7f 3e       	cpi	r23, 0xEF	; 239
     198:	41 41       	sbci	r20, 0x11	; 17
     19a:	41 3e       	cpi	r20, 0xE1	; 225
     19c:	7f 09       	sbc	r23, r15
     19e:	09 09       	sbc	r16, r9
     1a0:	06 3e       	cpi	r16, 0xE6	; 230
     1a2:	41 51       	subi	r20, 0x11	; 17
     1a4:	21 5e       	subi	r18, 0xE1	; 225
     1a6:	7f 09       	sbc	r23, r15
     1a8:	19 29       	or	r17, r9
     1aa:	46 46       	sbci	r20, 0x66	; 102
     1ac:	49 49       	sbci	r20, 0x99	; 153
     1ae:	49 31       	cpi	r20, 0x19	; 25
     1b0:	01 01       	movw	r0, r2
     1b2:	7f 01       	movw	r14, r30
     1b4:	01 3f       	cpi	r16, 0xF1	; 241
     1b6:	40 40       	sbci	r20, 0x00	; 0
     1b8:	40 3f       	cpi	r20, 0xF0	; 240
     1ba:	1f 20       	and	r1, r15
     1bc:	40 20       	and	r4, r0
     1be:	1f 3f       	cpi	r17, 0xFF	; 255
     1c0:	40 38       	cpi	r20, 0x80	; 128
     1c2:	40 3f       	cpi	r20, 0xF0	; 240
     1c4:	63 14       	cp	r6, r3
     1c6:	08 14       	cp	r0, r8
     1c8:	63 07       	cpc	r22, r19
     1ca:	08 70       	andi	r16, 0x08	; 8
     1cc:	08 07       	cpc	r16, r24
     1ce:	61 51       	subi	r22, 0x11	; 17
     1d0:	49 45       	sbci	r20, 0x59	; 89
     1d2:	43 00       	.word	0x0043	; ????
     1d4:	7f 41       	sbci	r23, 0x1F	; 31
     1d6:	41 00       	.word	0x0041	; ????
     1d8:	02 04       	cpc	r0, r2
     1da:	08 10       	cpse	r0, r8
     1dc:	20 00       	.word	0x0020	; ????
     1de:	41 41       	sbci	r20, 0x11	; 17
     1e0:	7f 00       	.word	0x007f	; ????
     1e2:	04 02       	muls	r16, r20
     1e4:	01 02       	muls	r16, r17
     1e6:	04 40       	sbci	r16, 0x04	; 4
     1e8:	40 40       	sbci	r20, 0x00	; 0
     1ea:	40 40       	sbci	r20, 0x00	; 0
     1ec:	00 01       	movw	r0, r0
     1ee:	02 04       	cpc	r0, r2
     1f0:	00 20       	and	r0, r0
     1f2:	54 54       	subi	r21, 0x44	; 68
     1f4:	54 78       	andi	r21, 0x84	; 132
     1f6:	7f 48       	sbci	r23, 0x8F	; 143
     1f8:	44 44       	sbci	r20, 0x44	; 68
     1fa:	38 38       	cpi	r19, 0x88	; 136
     1fc:	44 44       	sbci	r20, 0x44	; 68
     1fe:	44 20       	and	r4, r4
     200:	38 44       	sbci	r19, 0x48	; 72
     202:	44 48       	sbci	r20, 0x84	; 132
     204:	7f 38       	cpi	r23, 0x8F	; 143
     206:	54 54       	subi	r21, 0x44	; 68
     208:	54 18       	sub	r5, r4
     20a:	08 7e       	andi	r16, 0xE8	; 232
     20c:	09 01       	movw	r0, r18
     20e:	02 0c       	add	r0, r2
     210:	52 52       	subi	r21, 0x22	; 34
     212:	52 3e       	cpi	r21, 0xE2	; 226
     214:	7f 08       	sbc	r7, r15
     216:	04 04       	cpc	r0, r4
     218:	78 00       	.word	0x0078	; ????
     21a:	44 7d       	andi	r20, 0xD4	; 212
     21c:	40 00       	.word	0x0040	; ????
     21e:	20 40       	sbci	r18, 0x00	; 0
     220:	44 3d       	cpi	r20, 0xD4	; 212
     222:	00 7f       	andi	r16, 0xF0	; 240
     224:	10 28       	or	r1, r0
     226:	44 00       	.word	0x0044	; ????
     228:	00 41       	sbci	r16, 0x10	; 16
     22a:	7f 40       	sbci	r23, 0x0F	; 15
     22c:	00 7c       	andi	r16, 0xC0	; 192
     22e:	04 18       	sub	r0, r4
     230:	04 78       	andi	r16, 0x84	; 132
     232:	7c 08       	sbc	r7, r12
     234:	04 04       	cpc	r0, r4
     236:	78 38       	cpi	r23, 0x88	; 136
     238:	44 44       	sbci	r20, 0x44	; 68
     23a:	44 38       	cpi	r20, 0x84	; 132
     23c:	7c 14       	cp	r7, r12
     23e:	14 14       	cp	r1, r4
     240:	08 08       	sbc	r0, r8
     242:	14 14       	cp	r1, r4
     244:	14 7c       	andi	r17, 0xC4	; 196
     246:	7c 08       	sbc	r7, r12
     248:	04 04       	cpc	r0, r4
     24a:	08 48       	sbci	r16, 0x88	; 136
     24c:	54 54       	subi	r21, 0x44	; 68
     24e:	54 20       	and	r5, r4
     250:	04 3f       	cpi	r16, 0xF4	; 244
     252:	44 40       	sbci	r20, 0x04	; 4
     254:	20 3c       	cpi	r18, 0xC0	; 192
     256:	40 40       	sbci	r20, 0x00	; 0
     258:	20 7c       	andi	r18, 0xC0	; 192
     25a:	1c 20       	and	r1, r12
     25c:	40 20       	and	r4, r0
     25e:	1c 3c       	cpi	r17, 0xCC	; 204
     260:	40 30       	cpi	r20, 0x00	; 0
     262:	40 3c       	cpi	r20, 0xC0	; 192
     264:	44 28       	or	r4, r4
     266:	10 28       	or	r1, r0
     268:	44 0c       	add	r4, r4
     26a:	50 50       	subi	r21, 0x00	; 0
     26c:	50 3c       	cpi	r21, 0xC0	; 192
     26e:	44 64       	ori	r20, 0x44	; 68
     270:	54 4c       	sbci	r21, 0xC4	; 196
     272:	44 00       	.word	0x0044	; ????
     274:	08 36       	cpi	r16, 0x68	; 104
     276:	41 00       	.word	0x0041	; ????
     278:	00 00       	nop
     27a:	7f 00       	.word	0x007f	; ????
     27c:	00 00       	nop
     27e:	41 36       	cpi	r20, 0x61	; 97
     280:	08 00       	.word	0x0008	; ????
     282:	10 08       	sbc	r1, r0
     284:	08 10       	cpse	r0, r8
     286:	08 00       	.word	0x0008	; ????
     288:	00 00       	nop
     28a:	00 00       	nop

0000028c <ProductString>:
     28c:	30 03 44 00 61 00 6e 00 6e 00 79 00 27 00 73 00     0.D.a.n.n.y.'.s.
     29c:	20 00 47 00 32 00 39 00 20 00 47 00 65 00 61 00      .G.2.9. .G.e.a.
     2ac:	72 00 53 00 68 00 69 00 66 00 74 00 65 00 72 00     r.S.h.i.f.t.e.r.
     2bc:	00 00                                               ..

000002be <ManufacturerString>:
     2be:	1a 03 4c 00 55 00 46 00 41 00 20 00 4c 00 69 00     ..L.U.F.A. .L.i.
     2ce:	62 00 72 00 61 00 72 00 79 00 00 00                 b.r.a.r.y...

000002da <LanguageString>:
     2da:	04 03 09 04                                         ....

000002de <ConfigurationDescriptor>:
     2de:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     2ee:	00 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
     2fe:	00 05                                               ..

00000300 <DeviceDescriptor>:
     300:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
     310:	00 01                                               ..

00000312 <JoystickReport>:
     312:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
     322:	16 e0 ff 26 20 00 36 f0 ff 46 20 00 95 03 75 08     ...& .6..F ...u.
     332:	81 02 c0 05 09 19 01 29 08 15 00 25 01 75 01 95     .......)...%.u..
     342:	08 81 02 75 00 95 01 81 01 c0                       ...u......

0000034c <INIT_SSD1306>:
     34c:	12 00 ae 01 a8 3f 01 20 00 02 21 00 7f 02 22 00     .....?. ..!...".
     35c:	07 00 40 01 d3 00 00 a1 00 c8 01 da 12 01 81 7f     ..@.............
     36c:	00 a4 00 a6 01 d5 80 01 d9 c2 01 db 20 01 8d 14     ............ ...
     37c:	00 af                                               ..

0000037e <FONTS>:
     37e:	00 00 00 00 00 81 81 18 81 81 00 07 00 07 00 14     ................
     38e:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     39e:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     3ae:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     3be:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     3ce:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     3de:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     3ee:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     3fe:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     40e:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     41e:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     42e:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     43e:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     44e:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     45e:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     46e:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     47e:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     48e:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     49e:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     4ae:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     4be:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     4ce:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     4de:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     4ee:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     4fe:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     50e:	7c 14 14 14 08 08 14 14 14 7c 7c 08 04 04 08 48     |........||....H
     51e:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     52e:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     53e:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     54e:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000055e <__ctors_end>:
     55e:	11 24       	eor	r1, r1
     560:	1f be       	out	0x3f, r1	; 63
     562:	cf ef       	ldi	r28, 0xFF	; 255
     564:	da e0       	ldi	r29, 0x0A	; 10
     566:	de bf       	out	0x3e, r29	; 62
     568:	cd bf       	out	0x3d, r28	; 61

0000056a <__do_copy_data>:
     56a:	11 e0       	ldi	r17, 0x01	; 1
     56c:	a0 e0       	ldi	r26, 0x00	; 0
     56e:	b1 e0       	ldi	r27, 0x01	; 1
     570:	e6 ea       	ldi	r30, 0xA6	; 166
     572:	f0 e2       	ldi	r31, 0x20	; 32
     574:	02 c0       	rjmp	.+4      	; 0x57a <__do_copy_data+0x10>
     576:	05 90       	lpm	r0, Z+
     578:	0d 92       	st	X+, r0
     57a:	a8 35       	cpi	r26, 0x58	; 88
     57c:	b1 07       	cpc	r27, r17
     57e:	d9 f7       	brne	.-10     	; 0x576 <__do_copy_data+0xc>

00000580 <__do_clear_bss>:
     580:	25 e0       	ldi	r18, 0x05	; 5
     582:	a8 e5       	ldi	r26, 0x58	; 88
     584:	b1 e0       	ldi	r27, 0x01	; 1
     586:	01 c0       	rjmp	.+2      	; 0x58a <.do_clear_bss_start>

00000588 <.do_clear_bss_loop>:
     588:	1d 92       	st	X+, r1

0000058a <.do_clear_bss_start>:
     58a:	a7 38       	cpi	r26, 0x87	; 135
     58c:	b2 07       	cpc	r27, r18
     58e:	e1 f7       	brne	.-8      	; 0x588 <.do_clear_bss_loop>
     590:	ab d1       	rcall	.+854    	; 0x8e8 <main>
     592:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <_exit>

00000596 <__bad_interrupt>:
     596:	34 cd       	rjmp	.-1432   	; 0x0 <__vectors>

00000598 <display_ascii_font>:
	Configure PORTD as input
	This is for the reverse signal.
*/
void gpio_init(void)
{
	DDRD=0x00;	// configure port d as input
     598:	8f 92       	push	r8
     59a:	9f 92       	push	r9
     59c:	af 92       	push	r10
     59e:	bf 92       	push	r11
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	c0 91 6f 05 	lds	r28, 0x056F	; 0x80056f <current_gear>
     5b4:	cc 23       	and	r28, r28
     5b6:	21 f0       	breq	.+8      	; 0x5c0 <display_ascii_font+0x28>
     5b8:	c7 30       	cpi	r28, 0x07	; 7
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <display_ascii_font+0x2c>
     5bc:	c0 5d       	subi	r28, 0xD0	; 208
     5be:	03 c0       	rjmp	.+6      	; 0x5c6 <display_ascii_font+0x2e>
     5c0:	ce e4       	ldi	r28, 0x4E	; 78
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <display_ascii_font+0x2e>
     5c4:	c2 e5       	ldi	r28, 0x52	; 82
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 17 0c 	call	0x182e	; 0x182e <SSD1306_SetPosition>
     5ce:	0e 94 0c 0c 	call	0x1818	; 0x1818 <SSD1306_ClearScreen>
     5d2:	85 e0       	ldi	r24, 0x05	; 5
     5d4:	c8 9f       	mul	r28, r24
     5d6:	60 01       	movw	r12, r0
     5d8:	11 24       	eor	r1, r1
     5da:	e1 2c       	mov	r14, r1
     5dc:	f1 2c       	mov	r15, r1
     5de:	80 ea       	ldi	r24, 0xA0	; 160
     5e0:	c8 1a       	sub	r12, r24
     5e2:	d1 08       	sbc	r13, r1
     5e4:	88 24       	eor	r8, r8
     5e6:	83 94       	inc	r8
     5e8:	91 2c       	mov	r9, r1
     5ea:	f6 01       	movw	r30, r12
     5ec:	ee 0d       	add	r30, r14
     5ee:	ff 1d       	adc	r31, r15
     5f0:	e4 55       	subi	r30, 0x54	; 84
     5f2:	ff 4f       	sbci	r31, 0xFF	; 255
     5f4:	e4 91       	lpm	r30, Z
     5f6:	de 2d       	mov	r29, r14
     5f8:	dd 0f       	add	r29, r29
     5fa:	dd 0f       	add	r29, r29
     5fc:	dd 0f       	add	r29, r29
     5fe:	df 5c       	subi	r29, 0xCF	; 207
     600:	a1 2c       	mov	r10, r1
     602:	b1 2c       	mov	r11, r1
     604:	0e 2f       	mov	r16, r30
     606:	10 e0       	ldi	r17, 0x00	; 0
     608:	c4 01       	movw	r24, r8
     60a:	0a 2c       	mov	r0, r10
     60c:	02 c0       	rjmp	.+4      	; 0x612 <display_ascii_font+0x7a>
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	0a 94       	dec	r0
     614:	e2 f7       	brpl	.-8      	; 0x60e <display_ascii_font+0x76>
     616:	98 01       	movw	r18, r16
     618:	28 23       	and	r18, r24
     61a:	39 23       	and	r19, r25
     61c:	82 17       	cp	r24, r18
     61e:	93 07       	cpc	r25, r19
     620:	41 f4       	brne	.+16     	; 0x632 <display_ascii_font+0x9a>
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	6a 0d       	add	r22, r10
     626:	8d 2f       	mov	r24, r29
     628:	0e 94 17 0c 	call	0x182e	; 0x182e <SSD1306_SetPosition>
     62c:	8c 2f       	mov	r24, r28
     62e:	0e 94 46 0c 	call	0x188c	; 0x188c <SSD1306_DrawChar>
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	a8 1a       	sub	r10, r24
     636:	b8 0a       	sbc	r11, r24
     638:	88 e0       	ldi	r24, 0x08	; 8
     63a:	a8 16       	cp	r10, r24
     63c:	b1 04       	cpc	r11, r1
     63e:	21 f7       	brne	.-56     	; 0x608 <display_ascii_font+0x70>
     640:	8f ef       	ldi	r24, 0xFF	; 255
     642:	e8 1a       	sub	r14, r24
     644:	f8 0a       	sbc	r15, r24
     646:	85 e0       	ldi	r24, 0x05	; 5
     648:	e8 16       	cp	r14, r24
     64a:	f1 04       	cpc	r15, r1
     64c:	71 f6       	brne	.-100    	; 0x5ea <display_ascii_font+0x52>
     64e:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <ssd1306_addr>
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
     662:	bf 90       	pop	r11
     664:	af 90       	pop	r10
     666:	9f 90       	pop	r9
     668:	8f 90       	pop	r8
     66a:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <SSD1306_UpdateScreen>

0000066e <EVENT_USB_Device_Connect>:
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <usb_connected>
     674:	08 95       	ret

00000676 <EVENT_USB_Device_Disconnect>:
     676:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <usb_connected>
     67a:	08 95       	ret

0000067c <EVENT_USB_Device_ConfigurationChanged>:
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	a2 d7       	rcall	.+3908   	; 0x15c6 <HID_Device_ConfigureEndpoints>
     682:	e2 ee       	ldi	r30, 0xE2	; 226
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	84 60       	ori	r24, 0x04	; 4
     68a:	80 83       	st	Z, r24
     68c:	08 95       	ret

0000068e <EVENT_USB_Device_ControlRequest>:
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	66 c6       	rjmp	.+3276   	; 0x1360 <HID_Device_ProcessControlRequest>

00000694 <EVENT_USB_Device_StartOfFrame>:
     694:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     698:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	29 f0       	breq	.+10     	; 0x6aa <EVENT_USB_Device_StartOfFrame+0x16>
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     6a6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     6aa:	08 95       	ret

000006ac <CALLBACK_HID_Device_CreateHIDReport>:
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	00 90 6f 05 	lds	r0, 0x056F	; 0x80056f <current_gear>
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <CALLBACK_HID_Device_CreateHIDReport+0x12>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	0a 94       	dec	r0
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <CALLBACK_HID_Device_CreateHIDReport+0xe>
     6c2:	f9 01       	movw	r30, r18
     6c4:	83 83       	std	Z+3, r24	; 0x03
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	f8 01       	movw	r30, r16
     6cc:	91 83       	std	Z+1, r25	; 0x01
     6ce:	80 83       	st	Z, r24
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	08 95       	ret

000006d8 <CALLBACK_HID_Device_ProcessHIDReport>:
     6d8:	08 95       	ret

000006da <adc_init>:
     6da:	10 ba       	out	0x10, r1	; 16
     6dc:	11 ba       	out	0x11, r1	; 17
     6de:	ea e7       	ldi	r30, 0x7A	; 122
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	83 68       	ori	r24, 0x83	; 131
     6e6:	80 83       	st	Z, r24
     6e8:	ee e7       	ldi	r30, 0x7E	; 126
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	80 65       	ori	r24, 0x50	; 80
     6f0:	80 83       	st	Z, r24
     6f2:	ec e7       	ldi	r30, 0x7C	; 124
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	80 64       	ori	r24, 0x40	; 64
     6fa:	80 83       	st	Z, r24
     6fc:	08 95       	ret

000006fe <adc_read>:
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	8f 70       	andi	r24, 0x0F	; 15
     702:	80 64       	ori	r24, 0x40	; 64
     704:	91 50       	subi	r25, 0x01	; 1
     706:	81 f0       	breq	.+32     	; 0x728 <adc_read+0x2a>
     708:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     70c:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     710:	23 64       	ori	r18, 0x43	; 67
     712:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     716:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     71a:	26 fd       	sbrc	r18, 6
     71c:	fc cf       	rjmp	.-8      	; 0x716 <adc_read+0x18>
     71e:	25 e3       	ldi	r18, 0x35	; 53
     720:	2a 95       	dec	r18
     722:	f1 f7       	brne	.-4      	; 0x720 <adc_read+0x22>
     724:	00 00       	nop
     726:	ee cf       	rjmp	.-36     	; 0x704 <adc_read+0x6>
     728:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     72c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     730:	08 95       	ret

00000732 <get_reverse_state>:
	Get current state of reverse switch;
	return 1 (active) 0 (not active) 
*/
uint8_t get_reverse_state(void)
{
	if (PIND&(1<<PIND4))
     732:	4c 9b       	sbis	0x09, 4	; 9
     734:	04 c0       	rjmp	.+8      	; 0x73e <get_reverse_state+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     736:	85 e3       	ldi	r24, 0x35	; 53
     738:	8a 95       	dec	r24
     73a:	f1 f7       	brne	.-4      	; 0x738 <get_reverse_state+0x6>
     73c:	00 00       	nop
		_delay_us(10);				// poor mans debouning. I cant find my schmits.
	return (PIND&(1<<PIND4)) >> 4;  //debounce?
     73e:	89 b1       	in	r24, 0x09	; 9
}
     740:	82 95       	swap	r24
     742:	81 70       	andi	r24, 0x01	; 1
     744:	08 95       	ret

00000746 <calulate_gear_position>:
		x_axis -> ADC value
		y_axis -> ADC value
	Returns: Current gear. (0-7) 
*/
uint8_t calulate_gear_position(uint16_t x_axis, uint16_t y_axis)
{
     746:	9c 01       	movw	r18, r24
	uint8_t gear;
	gear=current_gear;
     748:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <current_gear>

	if (x_axis<THRESHOLD_LEFT) 				// stick is over to left
     74c:	20 36       	cpi	r18, 0x60	; 96
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	39 07       	cpc	r19, r25
     752:	48 f4       	brcc	.+18     	; 0x766 <calulate_gear_position+0x20>
	{
		if (y_axis>THRESHOLD_TOP) 				// at top, so first gear
     754:	61 3f       	cpi	r22, 0xF1	; 241
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	79 07       	cpc	r23, r25
     75a:	e0 f4       	brcc	.+56     	; 0x794 <calulate_gear_position+0x4e>
			gear=GEAR_01;
		else if (y_axis < THRESHOLD_BOTTOM) // at bottom so 2nd gear
     75c:	60 3c       	cpi	r22, 0xC0	; 192
     75e:	71 05       	cpc	r23, r1
     760:	f0 f4       	brcc	.+60     	; 0x79e <calulate_gear_position+0x58>
			gear=GEAR_02;
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	08 95       	ret
		// else
		// 	gear=GEAR_NEUTRAL;			// in between, no gear, neutral
	}
	else if (x_axis>THRESHOLD_RIGHT) 		// stick is over to the right
     766:	21 35       	cpi	r18, 0x51	; 81
     768:	32 40       	sbci	r19, 0x02	; 2
     76a:	58 f0       	brcs	.+22     	; 0x782 <calulate_gear_position+0x3c>
	{
		if (y_axis>THRESHOLD_TOP)				// at the top, so 5th
     76c:	61 3f       	cpi	r22, 0xF1	; 241
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	79 07       	cpc	r23, r25
     772:	90 f4       	brcc	.+36     	; 0x798 <calulate_gear_position+0x52>
			gear=GEAR_05;
		else if (y_axis<THRESHOLD_BOTTOM)	// at bottom, so, sixth
     774:	60 3c       	cpi	r22, 0xC0	; 192
     776:	71 05       	cpc	r23, r1
     778:	90 f4       	brcc	.+36     	; 0x79e <calulate_gear_position+0x58>
			gear=GEAR_06+reverse_gear;			// are we in reverse?
     77a:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <reverse_gear>
     77e:	8a 5f       	subi	r24, 0xFA	; 250
     780:	08 95       	ret
	}
	// else if (y_axis < THRESHOLD_TOP && y_axis > THRESHOLD_BOTTOM) // centered, no gear, neutral
	// 	gear=GEAR_NEUTRAL;
	else
	{
		if (y_axis>THRESHOLD_TOP)				// stick in middle, and top, so 3rd 
     782:	61 3f       	cpi	r22, 0xF1	; 241
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	79 07       	cpc	r23, r25
     788:	48 f4       	brcc	.+18     	; 0x79c <calulate_gear_position+0x56>
			gear=GEAR_03;
		else if (y_axis<THRESHOLD_BOTTOM) 	// stick in middle and bottom, so 4th
     78a:	60 3c       	cpi	r22, 0xC0	; 192
     78c:	71 05       	cpc	r23, r1
     78e:	38 f4       	brcc	.+14     	; 0x79e <calulate_gear_position+0x58>
			gear=GEAR_04;	
     790:	84 e0       	ldi	r24, 0x04	; 4
     792:	08 95       	ret
	gear=current_gear;

	if (x_axis<THRESHOLD_LEFT) 				// stick is over to left
	{
		if (y_axis>THRESHOLD_TOP) 				// at top, so first gear
			gear=GEAR_01;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	08 95       	ret
		// 	gear=GEAR_NEUTRAL;			// in between, no gear, neutral
	}
	else if (x_axis>THRESHOLD_RIGHT) 		// stick is over to the right
	{
		if (y_axis>THRESHOLD_TOP)				// at the top, so 5th
			gear=GEAR_05;
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	08 95       	ret
	// else if (y_axis < THRESHOLD_TOP && y_axis > THRESHOLD_BOTTOM) // centered, no gear, neutral
	// 	gear=GEAR_NEUTRAL;
	else
	{
		if (y_axis>THRESHOLD_TOP)				// stick in middle, and top, so 3rd 
			gear=GEAR_03;
     79c:	83 e0       	ldi	r24, 0x03	; 3
		else if (y_axis<THRESHOLD_BOTTOM) 	// stick in middle and bottom, so 4th
			gear=GEAR_04;	
	}
	return gear;
}
     79e:	08 95       	ret

000007a0 <init_usb>:
- Enable Interrupts
- Init LUFA USB 
*/
void init_usb(void)
{
	cli();
     7a0:	f8 94       	cli
	wdt_reset();
     7a2:	a8 95       	wdr
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	a8 95       	wdr
     7aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7ae:	88 61       	ori	r24, 0x18	; 24
     7b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7b8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	80 e8       	ldi	r24, 0x80	; 128
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     7c6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     7ca:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	clock_prescale_set(clock_div_1);
	sei();
     7cc:	78 94       	sei
	USB_Init();
     7ce:	69 c3       	rjmp	.+1746   	; 0xea2 <USB_Init>

000007d0 <display_dbg_header>:
/*
	Draw debug screen's header
*/
void display_dbg_header(void) 
{
	SSD1306_SetPosition (0, 0);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	0e 94 17 0c 	call	0x182e	; 0x182e <SSD1306_SetPosition>
	SSD1306_ClearScreen ();
     7d8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <SSD1306_ClearScreen>
	SSD1306_DrawLine (0, MAX_X, 0, 0);
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	6f e7       	ldi	r22, 0x7F	; 127
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	0e 94 a4 0c 	call	0x1948	; 0x1948 <SSD1306_DrawLine>
	SSD1306_SetPosition (1, 1);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	0e 94 17 0c 	call	0x182e	; 0x182e <SSD1306_SetPosition>
	SSD1306_DrawString ("Danny's GS Converter");
     7f0:	80 e1       	ldi	r24, 0x10	; 16
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <SSD1306_DrawString>

000007f8 <display_dbg_data>:
	Current USB state: connected/not connected.
	x/y axis ADC measurements in hex
	Current gear position
*/
void display_dbg_data(void)
{
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
	display_dbg_header();		// display header 
     7fe:	e8 df       	rcall	.-48     	; 0x7d0 <display_dbg_header>

	// Display usb connection data.
	SSD1306_SetPosition (1, 3);
     800:	63 e0       	ldi	r22, 0x03	; 3
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	0e 94 17 0c 	call	0x182e	; 0x182e <SSD1306_SetPosition>
	if (!usb_connected)
     808:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <usb_connected>
     80c:	81 11       	cpse	r24, r1
     80e:	03 c0       	rjmp	.+6      	; 0x816 <display_dbg_data+0x1e>
		SSD1306_DrawString ("USB DISCONNECTED");
     810:	85 e2       	ldi	r24, 0x25	; 37
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	02 c0       	rjmp	.+4      	; 0x81a <display_dbg_data+0x22>
	else
		SSD1306_DrawString ("USB CONNECTED     ");
     816:	86 e3       	ldi	r24, 0x36	; 54
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 6f 0c 	call	0x18de	; 0x18de <SSD1306_DrawString>


	// Display y_axis ADC value
	memset(test_adc_value_y,0,ADC_MAX_LEN);
     81e:	ee e5       	ldi	r30, 0x5E	; 94
     820:	f5 e0       	ldi	r31, 0x05	; 5
     822:	18 e0       	ldi	r17, 0x08	; 8
     824:	df 01       	movw	r26, r30
     826:	81 2f       	mov	r24, r17
     828:	1d 92       	st	X+, r1
     82a:	8a 95       	dec	r24
     82c:	e9 f7       	brne	.-6      	; 0x828 <display_dbg_data+0x30>
	sprintf(test_adc_value_y,"0x%.4x",yaxis_value);
     82e:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <yaxis_value+0x1>
     832:	8f 93       	push	r24
     834:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <yaxis_value>
     838:	8f 93       	push	r24
     83a:	c9 e4       	ldi	r28, 0x49	; 73
     83c:	d1 e0       	ldi	r29, 0x01	; 1
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	ff 93       	push	r31
     844:	ef 93       	push	r30
     846:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <sprintf>
	SSD1306_SetPosition (50, 5);
     84a:	65 e0       	ldi	r22, 0x05	; 5
     84c:	82 e3       	ldi	r24, 0x32	; 50
     84e:	ef d7       	rcall	.+4062   	; 0x182e <SSD1306_SetPosition>
	SSD1306_DrawString (test_adc_value_y);
     850:	8e e5       	ldi	r24, 0x5E	; 94
     852:	95 e0       	ldi	r25, 0x05	; 5
     854:	0e 94 6f 0c 	call	0x18de	; 0x18de <SSD1306_DrawString>

	// Display x-axist ADC value
	memset(test_adc_value_x,0,ADC_MAX_LEN);
     858:	e7 e6       	ldi	r30, 0x67	; 103
     85a:	f5 e0       	ldi	r31, 0x05	; 5
     85c:	df 01       	movw	r26, r30
     85e:	1d 92       	st	X+, r1
     860:	1a 95       	dec	r17
     862:	e9 f7       	brne	.-6      	; 0x85e <display_dbg_data+0x66>
	sprintf(test_adc_value_x,"0x%.4x",xaxis_value);
     864:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <xaxis_value+0x1>
     868:	8f 93       	push	r24
     86a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <xaxis_value>
     86e:	8f 93       	push	r24
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	ff 93       	push	r31
     876:	ef 93       	push	r30
     878:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <sprintf>
	SSD1306_SetPosition (2, 5);
     87c:	65 e0       	ldi	r22, 0x05	; 5
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	d6 d7       	rcall	.+4012   	; 0x182e <SSD1306_SetPosition>
	SSD1306_DrawString (test_adc_value_x);
     882:	87 e6       	ldi	r24, 0x67	; 103
     884:	95 e0       	ldi	r25, 0x05	; 5
     886:	0e 94 6f 0c 	call	0x18de	; 0x18de <SSD1306_DrawString>

	// Display current gear position
	memset(gear_string,0,GS_MAX_LEN);
     88a:	e2 e7       	ldi	r30, 0x72	; 114
     88c:	f5 e0       	ldi	r31, 0x05	; 5
     88e:	84 e0       	ldi	r24, 0x04	; 4
     890:	df 01       	movw	r26, r30
     892:	1d 92       	st	X+, r1
     894:	8a 95       	dec	r24
     896:	e9 f7       	brne	.-6      	; 0x892 <display_dbg_data+0x9a>
 	sprintf(gear_string,"%d",current_gear);
     898:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <current_gear>
     89c:	1f 92       	push	r1
     89e:	8f 93       	push	r24
     8a0:	80 e5       	ldi	r24, 0x50	; 80
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	ff 93       	push	r31
     8aa:	ef 93       	push	r30
     8ac:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <sprintf>
	SSD1306_SetPosition(2, 7);
     8b0:	67 e0       	ldi	r22, 0x07	; 7
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	bc d7       	rcall	.+3960   	; 0x182e <SSD1306_SetPosition>
	SSD1306_DrawString("gear");
     8b6:	83 e5       	ldi	r24, 0x53	; 83
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 6f 0c 	call	0x18de	; 0x18de <SSD1306_DrawString>
	SSD1306_SetPosition(40,7);
     8be:	67 e0       	ldi	r22, 0x07	; 7
     8c0:	88 e2       	ldi	r24, 0x28	; 40
     8c2:	b5 d7       	rcall	.+3946   	; 0x182e <SSD1306_SetPosition>
	SSD1306_DrawString(gear_string);
     8c4:	82 e7       	ldi	r24, 0x72	; 114
     8c6:	95 e0       	ldi	r25, 0x05	; 5
     8c8:	0e 94 6f 0c 	call	0x18de	; 0x18de <SSD1306_DrawString>
	SSD1306_UpdateScreen(ssd1306_addr);
     8cc:	8d b7       	in	r24, 0x3d	; 61
     8ce:	9e b7       	in	r25, 0x3e	; 62
     8d0:	42 96       	adiw	r24, 0x12	; 18
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	9e bf       	out	0x3e, r25	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	8d bf       	out	0x3d, r24	; 61
     8dc:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <ssd1306_addr>
}
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
 	sprintf(gear_string,"%d",current_gear);
	SSD1306_SetPosition(2, 7);
	SSD1306_DrawString("gear");
	SSD1306_SetPosition(40,7);
	SSD1306_DrawString(gear_string);
	SSD1306_UpdateScreen(ssd1306_addr);
     8e4:	1f 91       	pop	r17
     8e6:	80 c7       	rjmp	.+3840   	; 0x17e8 <SSD1306_UpdateScreen>

000008e8 <main>:
}

// Entry point
int main(void)
{
	usb_connected=0;
     8e8:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <usb_connected>
	void (*update_display_fn)(void);		// fn pointer for display functions
	ssd1306_addr = SSD1306_ADDR;			// set i2c address of oled display
     8ec:	8c e3       	ldi	r24, 0x3C	; 60
     8ee:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <ssd1306_addr>
	SSD1306_Init (ssd1306_addr);			// init OLED display
     8f2:	4a d7       	rcall	.+3732   	; 0x1788 <SSD1306_Init>
	adc_init();									// init adc for reading gear position
     8f4:	f2 de       	rcall	.-540    	; 0x6da <adc_init>

	// do some initial reads so we can setup the display mode
	reverse_gear=get_reverse_state(); 				// reset if not in reverse anymore.
     8f6:	1d df       	rcall	.-454    	; 0x732 <get_reverse_state>
     8f8:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <reverse_gear>
	yaxis_value=adc_read(YAXIS_ADC_CHANNEL);  	// read y axis
     8fc:	86 e0       	ldi	r24, 0x06	; 6
     8fe:	ff de       	rcall	.-514    	; 0x6fe <adc_read>
     900:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <yaxis_value+0x1>
     904:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <yaxis_value>
	xaxis_value=adc_read(XAXIS_ADC_CHANNEL);		// and again
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	f9 de       	rcall	.-526    	; 0x6fe <adc_read>
     90c:	90 93 79 05 	sts	0x0579, r25	; 0x800579 <xaxis_value+0x1>
     910:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <xaxis_value>
	current_gear=calulate_gear_position(xaxis_value,yaxis_value);
     914:	60 91 70 05 	lds	r22, 0x0570	; 0x800570 <yaxis_value>
     918:	70 91 71 05 	lds	r23, 0x0571	; 0x800571 <yaxis_value+0x1>
     91c:	14 df       	rcall	.-472    	; 0x746 <calulate_gear_position>
     91e:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <current_gear>
     922:	84 30       	cpi	r24, 0x04	; 4
	//display_dbg_data();

	// if in 4th, enable debug screen
	if ( current_gear == 4 )
     924:	19 f0       	breq	.+6      	; 0x92c <main+0x44>
	{
		update_display_fn=display_dbg_data;
	}
	else
	{
		update_display_fn=display_ascii_font;
     926:	cc ec       	ldi	r28, 0xCC	; 204
     928:	d2 e0       	ldi	r29, 0x02	; 2
     92a:	02 c0       	rjmp	.+4      	; 0x930 <main+0x48>
	//display_dbg_data();

	// if in 4th, enable debug screen
	if ( current_gear == 4 )
	{
		update_display_fn=display_dbg_data;
     92c:	cc ef       	ldi	r28, 0xFC	; 252
     92e:	d3 e0       	ldi	r29, 0x03	; 3
	{
		update_display_fn=display_ascii_font;
	}


	init_usb();						// Init LUFA USB stuff
     930:	37 df       	rcall	.-402    	; 0x7a0 <init_usb>
     932:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     934:	a8 95       	wdr
	GlobalInterruptEnable();	// Required for LUFA USB stuff
	wdt_reset();					// Clear watchdog timer (reset if something goes awry)
     936:	9d e0       	ldi	r25, 0x0D	; 13
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     938:	88 e1       	ldi	r24, 0x18	; 24
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	a8 95       	wdr
     940:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     944:	0f be       	out	0x3f, r0	; 63
     946:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	wdt_enable(WDTO_500MS);		// should be _plenty_ (loop is fast)

	for (;;)
	{	
		wdt_reset();
		reverse_gear=get_reverse_state(); 			// Check reverse switch state
     94a:	a8 95       	wdr
     94c:	f2 de       	rcall	.-540    	; 0x732 <get_reverse_state>
     94e:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <reverse_gear>
		yaxis_value=adc_read(YAXIS_ADC_CHANNEL);  // read y axis
     952:	86 e0       	ldi	r24, 0x06	; 6
     954:	d4 de       	rcall	.-600    	; 0x6fe <adc_read>
     956:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <yaxis_value+0x1>
     95a:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <yaxis_value>
		xaxis_value=adc_read(XAXIS_ADC_CHANNEL);	// read x axis position
     95e:	84 e0       	ldi	r24, 0x04	; 4
     960:	ce de       	rcall	.-612    	; 0x6fe <adc_read>
     962:	90 93 79 05 	sts	0x0579, r25	; 0x800579 <xaxis_value+0x1>
     966:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <xaxis_value>
		current_gear=calulate_gear_position(xaxis_value,yaxis_value);  // calc gear position
     96a:	60 91 70 05 	lds	r22, 0x0570	; 0x800570 <yaxis_value>
     96e:	70 91 71 05 	lds	r23, 0x0571	; 0x800571 <yaxis_value+0x1>
     972:	e9 de       	rcall	.-558    	; 0x746 <calulate_gear_position>
     974:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <current_gear>
		update_display_fn(); 		// update display
     978:	fe 01       	movw	r30, r28
		HID_Device_USBTask(&Joystick_HID_Interface);	// Check USB internals for new report
     97a:	09 95       	icall
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	35 d6       	rcall	.+3178   	; 0x15ec <HID_Device_USBTask>
		USB_USBTask();					// send usb report if we have a new one
     982:	d4 d4       	rcall	.+2472   	; 0x132c <USB_USBTask>
     984:	e2 cf       	rjmp	.-60     	; 0x94a <main+0x62>

00000986 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     986:	29 2f       	mov	r18, r25
     988:	33 27       	eor	r19, r19
     98a:	23 30       	cpi	r18, 0x03	; 3
     98c:	31 05       	cpc	r19, r1
     98e:	e1 f0       	breq	.+56     	; 0x9c8 <CALLBACK_USB_GetDescriptor+0x42>
     990:	58 f4       	brcc	.+22     	; 0x9a8 <CALLBACK_USB_GetDescriptor+0x22>
     992:	21 30       	cpi	r18, 0x01	; 1
     994:	31 05       	cpc	r19, r1
     996:	99 f0       	breq	.+38     	; 0x9be <CALLBACK_USB_GetDescriptor+0x38>
     998:	22 30       	cpi	r18, 0x02	; 2
     99a:	31 05       	cpc	r19, r1
     99c:	69 f5       	brne	.+90     	; 0x9f8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     99e:	82 e2       	ldi	r24, 0x22	; 34
     9a0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     9a2:	2e ed       	ldi	r18, 0xDE	; 222
     9a4:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     9a6:	2c c0       	rjmp	.+88     	; 0xa00 <__DATA_REGION_LENGTH__>
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     9a8:	21 32       	cpi	r18, 0x21	; 33
     9aa:	31 05       	cpc	r19, r1
     9ac:	01 f1       	breq	.+64     	; 0x9ee <CALLBACK_USB_GetDescriptor+0x68>
     9ae:	22 32       	cpi	r18, 0x22	; 34
     9b0:	31 05       	cpc	r19, r1
     9b2:	11 f5       	brne	.+68     	; 0x9f8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
     9b4:	8a e3       	ldi	r24, 0x3A	; 58
     9b6:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
     9b8:	22 e1       	ldi	r18, 0x12	; 18
     9ba:	33 e0       	ldi	r19, 0x03	; 3
			Size    = sizeof(JoystickReport);
			break;
     9bc:	21 c0       	rjmp	.+66     	; 0xa00 <__DATA_REGION_LENGTH__>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     9be:	82 e1       	ldi	r24, 0x12	; 18
     9c0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	33 e0       	ldi	r19, 0x03	; 3
     9c6:	1c c0       	rjmp	.+56     	; 0xa00 <__DATA_REGION_LENGTH__>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     9c8:	99 27       	eor	r25, r25
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	91 05       	cpc	r25, r1
     9ce:	49 f0       	breq	.+18     	; 0x9e2 <CALLBACK_USB_GetDescriptor+0x5c>
     9d0:	28 f0       	brcs	.+10     	; 0x9dc <CALLBACK_USB_GetDescriptor+0x56>
     9d2:	02 97       	sbiw	r24, 0x02	; 2
     9d4:	89 f4       	brne	.+34     	; 0x9f8 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     9d6:	ec e8       	ldi	r30, 0x8C	; 140
     9d8:	f2 e0       	ldi	r31, 0x02	; 2
     9da:	05 c0       	rjmp	.+10     	; 0x9e6 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     9dc:	ea ed       	ldi	r30, 0xDA	; 218
     9de:	f2 e0       	ldi	r31, 0x02	; 2
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     9e2:	ee eb       	ldi	r30, 0xBE	; 190
     9e4:	f2 e0       	ldi	r31, 0x02	; 2
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     9e6:	84 91       	lpm	r24, Z
     9e8:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     9ea:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     9ec:	09 c0       	rjmp	.+18     	; 0xa00 <__DATA_REGION_LENGTH__>
			} 
			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     9ee:	89 e0       	ldi	r24, 0x09	; 9
     9f0:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
			} 
			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
     9f2:	20 ef       	ldi	r18, 0xF0	; 240
     9f4:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__DATA_REGION_LENGTH__>
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
	const uint16_t wIndex,
	const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
	const void* Address = NULL;
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
     a00:	fa 01       	movw	r30, r20
     a02:	31 83       	std	Z+1, r19	; 0x01
     a04:	20 83       	st	Z, r18
	return Size;
}
     a06:	08 95       	ret

00000a08 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a08:	cf 92       	push	r12
     a0a:	df 92       	push	r13
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
     a1a:	8b 01       	movw	r16, r22
     a1c:	7a 01       	movw	r14, r20
     a1e:	ce d1       	rcall	.+924    	; 0xdbc <Endpoint_WaitUntilReady>
     a20:	81 11       	cpse	r24, r1
     a22:	33 c0       	rjmp	.+102    	; 0xa8a <Endpoint_Write_Stream_LE+0x82>
     a24:	e1 14       	cp	r14, r1
     a26:	f1 04       	cpc	r15, r1
     a28:	39 f0       	breq	.+14     	; 0xa38 <Endpoint_Write_Stream_LE+0x30>
     a2a:	f7 01       	movw	r30, r14
     a2c:	80 81       	ld	r24, Z
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	08 1b       	sub	r16, r24
     a32:	19 0b       	sbc	r17, r25
     a34:	c8 0f       	add	r28, r24
     a36:	d9 1f       	adc	r29, r25
     a38:	c1 2c       	mov	r12, r1
     a3a:	d1 2c       	mov	r13, r1
     a3c:	01 15       	cp	r16, r1
     a3e:	11 05       	cpc	r17, r1
     a40:	19 f1       	breq	.+70     	; 0xa88 <Endpoint_Write_Stream_LE+0x80>
     a42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a46:	85 fd       	sbrc	r24, 5
     a48:	16 c0       	rjmp	.+44     	; 0xa76 <Endpoint_Write_Stream_LE+0x6e>
     a4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a4e:	8e 77       	andi	r24, 0x7E	; 126
     a50:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a54:	6b d4       	rcall	.+2262   	; 0x132c <USB_USBTask>
     a56:	e1 14       	cp	r14, r1
     a58:	f1 04       	cpc	r15, r1
     a5a:	49 f0       	breq	.+18     	; 0xa6e <Endpoint_Write_Stream_LE+0x66>
     a5c:	f7 01       	movw	r30, r14
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	c8 0e       	add	r12, r24
     a64:	d9 1e       	adc	r13, r25
     a66:	d1 82       	std	Z+1, r13	; 0x01
     a68:	c0 82       	st	Z, r12
     a6a:	85 e0       	ldi	r24, 0x05	; 5
     a6c:	0e c0       	rjmp	.+28     	; 0xa8a <Endpoint_Write_Stream_LE+0x82>
     a6e:	a6 d1       	rcall	.+844    	; 0xdbc <Endpoint_WaitUntilReady>
     a70:	88 23       	and	r24, r24
     a72:	21 f3       	breq	.-56     	; 0xa3c <Endpoint_Write_Stream_LE+0x34>
     a74:	0a c0       	rjmp	.+20     	; 0xa8a <Endpoint_Write_Stream_LE+0x82>
     a76:	89 91       	ld	r24, Y+
     a78:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     a7c:	01 50       	subi	r16, 0x01	; 1
     a7e:	11 09       	sbc	r17, r1
     a80:	ff ef       	ldi	r31, 0xFF	; 255
     a82:	cf 1a       	sub	r12, r31
     a84:	df 0a       	sbc	r13, r31
     a86:	da cf       	rjmp	.-76     	; 0xa3c <Endpoint_Write_Stream_LE+0x34>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	cf 90       	pop	r12
     a9a:	08 95       	ret

00000a9c <Endpoint_Write_Control_Stream_LE>:
     a9c:	20 91 85 05 	lds	r18, 0x0585	; 0x800585 <USB_ControlRequest+0x6>
     aa0:	30 91 86 05 	lds	r19, 0x0586	; 0x800586 <USB_ControlRequest+0x7>
     aa4:	26 17       	cp	r18, r22
     aa6:	37 07       	cpc	r19, r23
     aa8:	48 f0       	brcs	.+18     	; 0xabc <Endpoint_Write_Control_Stream_LE+0x20>
     aaa:	61 15       	cp	r22, r1
     aac:	71 05       	cpc	r23, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <Endpoint_Write_Control_Stream_LE+0x22>
     ab0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     ab4:	2e 77       	andi	r18, 0x7E	; 126
     ab6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     aba:	01 c0       	rjmp	.+2      	; 0xabe <Endpoint_Write_Control_Stream_LE+0x22>
     abc:	b9 01       	movw	r22, r18
     abe:	fc 01       	movw	r30, r24
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	61 15       	cp	r22, r1
     ac4:	71 05       	cpc	r23, r1
     ac6:	79 f1       	breq	.+94     	; 0xb26 <__stack+0x27>
     ac8:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>
     acc:	88 23       	and	r24, r24
     ace:	f1 f1       	breq	.+124    	; 0xb4c <__stack+0x4d>
     ad0:	85 30       	cpi	r24, 0x05	; 5
     ad2:	f1 f1       	breq	.+124    	; 0xb50 <__stack+0x51>
     ad4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     ad8:	83 fd       	sbrc	r24, 3
     ada:	3c c0       	rjmp	.+120    	; 0xb54 <__stack+0x55>
     adc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     ae0:	82 fd       	sbrc	r24, 2
     ae2:	2e c0       	rjmp	.+92     	; 0xb40 <__stack+0x41>
     ae4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     ae8:	80 ff       	sbrs	r24, 0
     aea:	eb cf       	rjmp	.-42     	; 0xac2 <Endpoint_Write_Control_Stream_LE+0x26>
     aec:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
     af0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	92 2b       	or	r25, r18
     af8:	61 15       	cp	r22, r1
     afa:	71 05       	cpc	r23, r1
     afc:	51 f0       	breq	.+20     	; 0xb12 <__stack+0x13>
     afe:	88 30       	cpi	r24, 0x08	; 8
     b00:	91 05       	cpc	r25, r1
     b02:	38 f4       	brcc	.+14     	; 0xb12 <__stack+0x13>
     b04:	21 91       	ld	r18, Z+
     b06:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     b0a:	61 50       	subi	r22, 0x01	; 1
     b0c:	71 09       	sbc	r23, r1
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	f3 cf       	rjmp	.-26     	; 0xaf8 <Endpoint_Write_Control_Stream_LE+0x5c>
     b12:	21 e0       	ldi	r18, 0x01	; 1
     b14:	08 97       	sbiw	r24, 0x08	; 8
     b16:	09 f0       	breq	.+2      	; 0xb1a <__stack+0x1b>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b1e:	8e 77       	andi	r24, 0x7E	; 126
     b20:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b24:	ce cf       	rjmp	.-100    	; 0xac2 <Endpoint_Write_Control_Stream_LE+0x26>
     b26:	21 11       	cpse	r18, r1
     b28:	cf cf       	rjmp	.-98     	; 0xac8 <Endpoint_Write_Control_Stream_LE+0x2c>
     b2a:	0a c0       	rjmp	.+20     	; 0xb40 <__stack+0x41>
     b2c:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>
     b30:	88 23       	and	r24, r24
     b32:	61 f0       	breq	.+24     	; 0xb4c <__stack+0x4d>
     b34:	85 30       	cpi	r24, 0x05	; 5
     b36:	61 f0       	breq	.+24     	; 0xb50 <__stack+0x51>
     b38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b3c:	83 fd       	sbrc	r24, 3
     b3e:	0a c0       	rjmp	.+20     	; 0xb54 <__stack+0x55>
     b40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b44:	82 ff       	sbrs	r24, 2
     b46:	f2 cf       	rjmp	.-28     	; 0xb2c <__stack+0x2d>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 95       	ret
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	08 95       	ret
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	08 95       	ret
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	08 95       	ret

00000b58 <Endpoint_Read_Control_Stream_LE>:
     b58:	61 15       	cp	r22, r1
     b5a:	71 05       	cpc	r23, r1
     b5c:	29 f4       	brne	.+10     	; 0xb68 <Endpoint_Read_Control_Stream_LE+0x10>
     b5e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b62:	2b 77       	andi	r18, 0x7B	; 123
     b64:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b68:	fc 01       	movw	r30, r24
     b6a:	61 15       	cp	r22, r1
     b6c:	71 05       	cpc	r23, r1
     b6e:	41 f1       	breq	.+80     	; 0xbc0 <Endpoint_Read_Control_Stream_LE+0x68>
     b70:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>
     b74:	88 23       	and	r24, r24
     b76:	61 f1       	breq	.+88     	; 0xbd0 <Endpoint_Read_Control_Stream_LE+0x78>
     b78:	85 30       	cpi	r24, 0x05	; 5
     b7a:	61 f1       	breq	.+88     	; 0xbd4 <Endpoint_Read_Control_Stream_LE+0x7c>
     b7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b80:	83 fd       	sbrc	r24, 3
     b82:	24 c0       	rjmp	.+72     	; 0xbcc <Endpoint_Read_Control_Stream_LE+0x74>
     b84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     b88:	82 ff       	sbrs	r24, 2
     b8a:	ef cf       	rjmp	.-34     	; 0xb6a <Endpoint_Read_Control_Stream_LE+0x12>
     b8c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
     b90:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	92 2b       	or	r25, r18
     b98:	89 2b       	or	r24, r25
     b9a:	31 f0       	breq	.+12     	; 0xba8 <Endpoint_Read_Control_Stream_LE+0x50>
     b9c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     ba0:	81 93       	st	Z+, r24
     ba2:	61 50       	subi	r22, 0x01	; 1
     ba4:	71 09       	sbc	r23, r1
     ba6:	91 f7       	brne	.-28     	; 0xb8c <Endpoint_Read_Control_Stream_LE+0x34>
     ba8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bac:	8b 77       	andi	r24, 0x7B	; 123
     bae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bb2:	db cf       	rjmp	.-74     	; 0xb6a <Endpoint_Read_Control_Stream_LE+0x12>
     bb4:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>
     bb8:	88 23       	and	r24, r24
     bba:	51 f0       	breq	.+20     	; 0xbd0 <Endpoint_Read_Control_Stream_LE+0x78>
     bbc:	85 30       	cpi	r24, 0x05	; 5
     bbe:	51 f0       	breq	.+20     	; 0xbd4 <Endpoint_Read_Control_Stream_LE+0x7c>
     bc0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bc4:	80 ff       	sbrs	r24, 0
     bc6:	f6 cf       	rjmp	.-20     	; 0xbb4 <Endpoint_Read_Control_Stream_LE+0x5c>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	08 95       	ret
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	08 95       	ret
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	08 95       	ret
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	08 95       	ret

00000bd8 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     bd8:	20 91 85 05 	lds	r18, 0x0585	; 0x800585 <USB_ControlRequest+0x6>
     bdc:	30 91 86 05 	lds	r19, 0x0586	; 0x800586 <USB_ControlRequest+0x7>
     be0:	26 17       	cp	r18, r22
     be2:	37 07       	cpc	r19, r23
     be4:	48 f0       	brcs	.+18     	; 0xbf8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     be6:	61 15       	cp	r22, r1
     be8:	71 05       	cpc	r23, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bec:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bf0:	2e 77       	andi	r18, 0x7E	; 126
     bf2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <Endpoint_Write_Control_PStream_LE+0x22>
     bf8:	b9 01       	movw	r22, r18
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     bfe:	61 15       	cp	r22, r1
     c00:	71 05       	cpc	r23, r1
     c02:	91 f1       	breq	.+100    	; 0xc68 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c04:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c08:	88 23       	and	r24, r24
     c0a:	09 f4       	brne	.+2      	; 0xc0e <Endpoint_Write_Control_PStream_LE+0x36>
     c0c:	40 c0       	rjmp	.+128    	; 0xc8e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c0e:	85 30       	cpi	r24, 0x05	; 5
     c10:	09 f4       	brne	.+2      	; 0xc14 <Endpoint_Write_Control_PStream_LE+0x3c>
     c12:	3f c0       	rjmp	.+126    	; 0xc92 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c18:	83 fd       	sbrc	r24, 3
     c1a:	3d c0       	rjmp	.+122    	; 0xc96 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     c20:	82 fd       	sbrc	r24, 2
     c22:	2f c0       	rjmp	.+94     	; 0xc82 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  break;

		if (Endpoint_IsINReady())
     c28:	80 ff       	sbrs	r24, 0
     c2a:	e9 cf       	rjmp	.-46     	; 0xbfe <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     c2c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
     c30:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c38:	61 15       	cp	r22, r1
     c3a:	71 05       	cpc	r23, r1
     c3c:	59 f0       	breq	.+22     	; 0xc54 <Endpoint_Write_Control_PStream_LE+0x7c>
     c3e:	88 30       	cpi	r24, 0x08	; 8
     c40:	91 05       	cpc	r25, r1
     c42:	40 f4       	brcc	.+16     	; 0xc54 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c44:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c46:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     c4a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     c4c:	61 50       	subi	r22, 0x01	; 1
     c4e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	f2 cf       	rjmp	.-28     	; 0xc38 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c54:	21 e0       	ldi	r18, 0x01	; 1
     c56:	08 97       	sbiw	r24, 0x08	; 8
     c58:	09 f0       	breq	.+2      	; 0xc5c <Endpoint_Write_Control_PStream_LE+0x84>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c60:	8e 77       	andi	r24, 0x7E	; 126
     c62:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c66:	cb cf       	rjmp	.-106    	; 0xbfe <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c68:	21 11       	cpse	r18, r1
     c6a:	cc cf       	rjmp	.-104    	; 0xc04 <Endpoint_Write_Control_PStream_LE+0x2c>
     c6c:	0a c0       	rjmp	.+20     	; 0xc82 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c6e:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c72:	88 23       	and	r24, r24
     c74:	61 f0       	breq	.+24     	; 0xc8e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c76:	85 30       	cpi	r24, 0x05	; 5
     c78:	61 f0       	breq	.+24     	; 0xc92 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c7e:	83 fd       	sbrc	r24, 3
     c80:	0a c0       	rjmp	.+20     	; 0xc96 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     c86:	82 ff       	sbrs	r24, 2
     c88:	f2 cf       	rjmp	.-28     	; 0xc6e <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c96:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c98:	08 95       	ret

00000c9a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     c9a:	98 2f       	mov	r25, r24
     c9c:	97 30       	cpi	r25, 0x07	; 7
     c9e:	68 f5       	brcc	.+90     	; 0xcfa <Endpoint_ConfigureEndpoint_Prv+0x60>
     ca0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     ca4:	98 17       	cp	r25, r24
     ca6:	39 f0       	breq	.+14     	; 0xcb6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     ca8:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     cac:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     cb0:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
     cb4:	03 c0       	rjmp	.+6      	; 0xcbc <Endpoint_ConfigureEndpoint_Prv+0x22>
     cb6:	24 2f       	mov	r18, r20
     cb8:	76 2f       	mov	r23, r22
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	21 fd       	sbrc	r18, 1
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     cc0:	9f 5f       	subi	r25, 0xFF	; 255
     cc2:	ec cf       	rjmp	.-40     	; 0xc9c <Endpoint_ConfigureEndpoint_Prv+0x2>
     cc4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     cc8:	3e 7f       	andi	r19, 0xFE	; 254
     cca:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     cce:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     cd2:	3d 7f       	andi	r19, 0xFD	; 253
     cd4:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     cd8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     cdc:	31 60       	ori	r19, 0x01	; 1
     cde:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     ce2:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     ce6:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     cea:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
     cee:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
     cf2:	27 fd       	sbrc	r18, 7
     cf4:	e5 cf       	rjmp	.-54     	; 0xcc0 <Endpoint_ConfigureEndpoint_Prv+0x26>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	08 95       	ret
     cfa:	8f 70       	andi	r24, 0x0F	; 15
     cfc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	08 95       	ret

00000d04 <Endpoint_ConfigureEndpointTable>:
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	06 2f       	mov	r16, r22
     d0e:	ec 01       	movw	r28, r24
     d10:	10 e0       	ldi	r17, 0x00	; 0
     d12:	10 17       	cp	r17, r16
     d14:	71 f1       	breq	.+92     	; 0xd72 <Endpoint_ConfigureEndpointTable+0x6e>
     d16:	68 81       	ld	r22, Y
     d18:	61 11       	cpse	r22, r1
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <Endpoint_ConfigureEndpointTable+0x1e>
     d1c:	1f 5f       	subi	r17, 0xFF	; 255
     d1e:	25 96       	adiw	r28, 0x05	; 5
     d20:	f8 cf       	rjmp	.-16     	; 0xd12 <Endpoint_ConfigureEndpointTable+0xe>
     d22:	2c 81       	ldd	r18, Y+4	; 0x04
     d24:	a9 81       	ldd	r26, Y+1	; 0x01
     d26:	ba 81       	ldd	r27, Y+2	; 0x02
     d28:	9b 81       	ldd	r25, Y+3	; 0x03
     d2a:	86 2f       	mov	r24, r22
     d2c:	8f 70       	andi	r24, 0x0F	; 15
     d2e:	87 30       	cpi	r24, 0x07	; 7
     d30:	10 f0       	brcs	.+4      	; 0xd36 <Endpoint_ConfigureEndpointTable+0x32>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	1f c0       	rjmp	.+62     	; 0xd74 <Endpoint_ConfigureEndpointTable+0x70>
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	10 f4       	brcc	.+4      	; 0xd3e <Endpoint_ConfigureEndpointTable+0x3a>
     d3a:	42 e0       	ldi	r20, 0x02	; 2
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <Endpoint_ConfigureEndpointTable+0x3c>
     d3e:	46 e0       	ldi	r20, 0x06	; 6
     d40:	e8 e0       	ldi	r30, 0x08	; 8
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	ea 17       	cp	r30, r26
     d48:	fb 07       	cpc	r31, r27
     d4a:	20 f4       	brcc	.+8      	; 0xd54 <Endpoint_ConfigureEndpointTable+0x50>
     d4c:	2f 5f       	subi	r18, 0xFF	; 255
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	f9 cf       	rjmp	.-14     	; 0xd46 <Endpoint_ConfigureEndpointTable+0x42>
     d54:	22 95       	swap	r18
     d56:	20 7f       	andi	r18, 0xF0	; 240
     d58:	42 2b       	or	r20, r18
     d5a:	50 e4       	ldi	r21, 0x40	; 64
     d5c:	95 9f       	mul	r25, r21
     d5e:	90 01       	movw	r18, r0
     d60:	11 24       	eor	r1, r1
     d62:	66 1f       	adc	r22, r22
     d64:	66 27       	eor	r22, r22
     d66:	66 1f       	adc	r22, r22
     d68:	62 2b       	or	r22, r18
     d6a:	97 df       	rcall	.-210    	; 0xc9a <Endpoint_ConfigureEndpoint_Prv>
     d6c:	81 11       	cpse	r24, r1
     d6e:	d6 cf       	rjmp	.-84     	; 0xd1c <Endpoint_ConfigureEndpointTable+0x18>
     d70:	e0 cf       	rjmp	.-64     	; 0xd32 <Endpoint_ConfigureEndpointTable+0x2e>
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     d7e:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USB_ControlRequest>
     d82:	87 ff       	sbrs	r24, 7
     d84:	11 c0       	rjmp	.+34     	; 0xda8 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     d8a:	82 fd       	sbrc	r24, 2
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d8e:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>
     d92:	81 11       	cpse	r24, r1
     d94:	f8 cf       	rjmp	.-16     	; 0xd86 <Endpoint_ClearStatusStage+0x8>
     d96:	11 c0       	rjmp	.+34     	; 0xdba <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     d9c:	8b 77       	andi	r24, 0x7B	; 123
     d9e:	0b c0       	rjmp	.+22     	; 0xdb6 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     da0:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>
     da4:	88 23       	and	r24, r24
     da6:	49 f0       	breq	.+18     	; 0xdba <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     da8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     dac:	80 ff       	sbrs	r24, 0
     dae:	f8 cf       	rjmp	.-16     	; 0xda0 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     db0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     db4:	8e 77       	andi	r24, 0x7E	; 126
     db6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     dba:	08 95       	ret

00000dbc <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     dbc:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     dc0:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
     dc4:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     dc6:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     dca:	84 2f       	mov	r24, r20
     dcc:	81 70       	andi	r24, 0x01	; 1
     dce:	40 ff       	sbrs	r20, 0
     dd0:	23 c0       	rjmp	.+70     	; 0xe18 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dd2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     dd6:	80 fd       	sbrc	r24, 0
     dd8:	1d c0       	rjmp	.+58     	; 0xe14 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     dda:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     dde:	88 23       	and	r24, r24
     de0:	99 f0       	breq	.+38     	; 0xe08 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     de2:	85 30       	cpi	r24, 0x05	; 5
     de4:	99 f0       	breq	.+38     	; 0xe0c <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     de6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     dea:	85 fd       	sbrc	r24, 5
     dec:	11 c0       	rjmp	.+34     	; 0xe10 <Endpoint_WaitUntilReady+0x54>
     dee:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
     df2:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     df6:	24 17       	cp	r18, r20
     df8:	35 07       	cpc	r19, r21
     dfa:	29 f3       	breq	.-54     	; 0xdc6 <Endpoint_WaitUntilReady+0xa>
     dfc:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     dfe:	11 f0       	breq	.+4      	; 0xe04 <Endpoint_WaitUntilReady+0x48>
     e00:	9a 01       	movw	r18, r20
     e02:	e1 cf       	rjmp	.-62     	; 0xdc6 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     e0c:	83 e0       	ldi	r24, 0x03	; 3
     e0e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e18:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     e1c:	42 ff       	sbrs	r20, 2
     e1e:	dd cf       	rjmp	.-70     	; 0xdda <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     e20:	08 95       	ret

00000e22 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e2a:	4b d0       	rcall	.+150    	; 0xec2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e2c:	52 d0       	rcall	.+164    	; 0xed2 <USB_INT_ClearAllInterrupts>
     e2e:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e30:	d0 e0       	ldi	r29, 0x00	; 0
     e32:	88 81       	ld	r24, Y
     e34:	8f 77       	andi	r24, 0x7F	; 127
     e36:	88 83       	st	Y, r24
     e38:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	88 83       	st	Y, r24
     e3e:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e40:	8f 7d       	andi	r24, 0xDF	; 223
     e42:	88 83       	st	Y, r24
     e44:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e46:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     e4a:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     e4e:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     e52:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     e56:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     e58:	10 e0       	ldi	r17, 0x00	; 0
     e5a:	f8 01       	movw	r30, r16
     e5c:	80 81       	ld	r24, Z
     e5e:	8b 7f       	andi	r24, 0xFB	; 251
     e60:	80 83       	st	Z, r24
     e62:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     e64:	81 60       	ori	r24, 0x01	; 1
     e66:	88 83       	st	Y, r24
     e68:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	15 df       	rcall	.-470    	; 0xc9a <Endpoint_ConfigureEndpoint_Prv>
     e70:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	80 83       	st	Z, r24
     e7a:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	81 60       	ori	r24, 0x01	; 1
     e82:	80 83       	st	Z, r24
     e84:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     e86:	88 60       	ori	r24, 0x08	; 8
     e88:	80 83       	st	Z, r24
     e8a:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     e8c:	80 81       	ld	r24, Z
     e8e:	8e 7f       	andi	r24, 0xFE	; 254
     e90:	80 83       	st	Z, r24
     e92:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     e94:	80 61       	ori	r24, 0x10	; 16
     e96:	88 83       	st	Y, r24
     e98:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	08 95       	ret

00000ea2 <USB_Init>:
     ea2:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8f 7e       	andi	r24, 0xEF	; 239
     eaa:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     eac:	e7 ed       	ldi	r30, 0xD7	; 215
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	81 60       	ori	r24, 0x01	; 1
     eb4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <USB_IsInitialized>

	USB_ResetInterface();
     ec0:	b0 cf       	rjmp	.-160    	; 0xe22 <USB_ResetInterface>

00000ec2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     ec2:	e8 ed       	ldi	r30, 0xD8	; 216
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ecc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     ed0:	08 95       	ret

00000ed2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ed2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     ed6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     eda:	08 95       	ret

00000edc <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	2f 93       	push	r18
     ee8:	3f 93       	push	r19
     eea:	4f 93       	push	r20
     eec:	5f 93       	push	r21
     eee:	6f 93       	push	r22
     ef0:	7f 93       	push	r23
     ef2:	8f 93       	push	r24
     ef4:	9f 93       	push	r25
     ef6:	af 93       	push	r26
     ef8:	bf 93       	push	r27
     efa:	ef 93       	push	r30
     efc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     efe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     f02:	82 ff       	sbrs	r24, 2
     f04:	0a c0       	rjmp	.+20     	; 0xf1a <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     f06:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     f0a:	82 ff       	sbrs	r24, 2
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     f0e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     f12:	8b 7f       	andi	r24, 0xFB	; 251
     f14:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     f18:	bd db       	rcall	.-2182   	; 0x694 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     f1a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     f1e:	80 ff       	sbrs	r24, 0
     f20:	1d c0       	rjmp	.+58     	; 0xf5c <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     f22:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     f26:	80 ff       	sbrs	r24, 0
     f28:	19 c0       	rjmp	.+50     	; 0xf5c <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     f2a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
     f2e:	8e 7f       	andi	r24, 0xFE	; 254
     f30:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     f34:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     f38:	80 ff       	sbrs	r24, 0
     f3a:	0c c0       	rjmp	.+24     	; 0xf54 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f3c:	80 e1       	ldi	r24, 0x10	; 16
     f3e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f40:	82 e1       	ldi	r24, 0x12	; 18
     f42:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     f44:	09 b4       	in	r0, 0x29	; 41
     f46:	00 fe       	sbrs	r0, 0
     f48:	fd cf       	rjmp	.-6      	; 0xf44 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <USB_DeviceState>
			EVENT_USB_Device_Connect();
     f50:	8e db       	rcall	.-2276   	; 0x66e <EVENT_USB_Device_Connect>
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f54:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     f56:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     f5a:	8d db       	rcall	.-2278   	; 0x676 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     f5c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     f60:	80 ff       	sbrs	r24, 0
     f62:	18 c0       	rjmp	.+48     	; 0xf94 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     f64:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     f68:	80 ff       	sbrs	r24, 0
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f6c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f76:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     f7a:	80 61       	ori	r24, 0x10	; 16
     f7c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     f80:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     f84:	80 62       	ori	r24, 0x20	; 32
     f86:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f8a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     f8c:	85 e0       	ldi	r24, 0x05	; 5
     f8e:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     f92:	cb d1       	rcall	.+918    	; 0x132a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f98:	84 ff       	sbrs	r24, 4
     f9a:	2f c0       	rjmp	.+94     	; 0xffa <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     fa0:	84 ff       	sbrs	r24, 4
     fa2:	2b c0       	rjmp	.+86     	; 0xffa <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     fa4:	80 e1       	ldi	r24, 0x10	; 16
     fa6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     fa8:	82 e1       	ldi	r24, 0x12	; 18
     faa:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     fac:	09 b4       	in	r0, 0x29	; 41
     fae:	00 fe       	sbrs	r0, 0
     fb0:	fd cf       	rjmp	.-6      	; 0xfac <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     fb2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     fb6:	8f 7d       	andi	r24, 0xDF	; 223
     fb8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     fbc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     fc0:	8f 7e       	andi	r24, 0xEF	; 239
     fc2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     fc6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     fca:	8f 7e       	andi	r24, 0xEF	; 239
     fcc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     fd0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     fd4:	81 60       	ori	r24, 0x01	; 1
     fd6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     fda:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <USB_Device_ConfigurationNumber>
     fde:	88 23       	and	r24, r24
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     fe6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     fea:	87 fd       	sbrc	r24, 7
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <__vector_10+0x116>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <__vector_10+0x118>
     ff2:	83 e0       	ldi	r24, 0x03	; 3
     ff4:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     ff8:	98 d1       	rcall	.+816    	; 0x132a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     ffa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     ffe:	83 ff       	sbrs	r24, 3
    1000:	22 c0       	rjmp	.+68     	; 0x1046 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1002:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1006:	83 ff       	sbrs	r24, 3
    1008:	1e c0       	rjmp	.+60     	; 0x1046 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    100a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    100e:	87 7f       	andi	r24, 0xF7	; 247
    1010:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    101a:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    101e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1028:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    102c:	8e 7f       	andi	r24, 0xFE	; 254
    102e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1032:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1036:	80 61       	ori	r24, 0x10	; 16
    1038:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    103c:	42 e0       	ldi	r20, 0x02	; 2
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	2b de       	rcall	.-938    	; 0xc9a <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1044:	72 d1       	rcall	.+740    	; 0x132a <USB_Event_Stub>
    1046:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1048:	ef 91       	pop	r30
    104a:	bf 91       	pop	r27
    104c:	af 91       	pop	r26
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	7f 91       	pop	r23
    1054:	6f 91       	pop	r22
    1056:	5f 91       	pop	r21
    1058:	4f 91       	pop	r20
    105a:	3f 91       	pop	r19
    105c:	2f 91       	pop	r18
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <USB_Device_ProcessControlRequest>:
    1068:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	aa 97       	sbiw	r28, 0x2a	; 42
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	ef e7       	ldi	r30, 0x7F	; 127
    1080:	f5 e0       	ldi	r31, 0x05	; 5
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1082:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1086:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1088:	25 e0       	ldi	r18, 0x05	; 5
    108a:	e7 38       	cpi	r30, 0x87	; 135
    108c:	f2 07       	cpc	r31, r18
    108e:	c9 f7       	brne	.-14     	; 0x1082 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1090:	fe da       	rcall	.-2564   	; 0x68e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1092:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
    1096:	83 ff       	sbrs	r24, 3
    1098:	30 c1       	rjmp	.+608    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    109a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    109e:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <USB_ControlRequest+0x1>
    10a2:	95 30       	cpi	r25, 0x05	; 5
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <USB_Device_ProcessControlRequest+0x40>
    10a6:	83 c0       	rjmp	.+262    	; 0x11ae <USB_Device_ProcessControlRequest+0x146>
    10a8:	30 f4       	brcc	.+12     	; 0x10b6 <USB_Device_ProcessControlRequest+0x4e>
    10aa:	91 30       	cpi	r25, 0x01	; 1
    10ac:	a9 f1       	breq	.+106    	; 0x1118 <USB_Device_ProcessControlRequest+0xb0>
    10ae:	68 f0       	brcs	.+26     	; 0x10ca <USB_Device_ProcessControlRequest+0x62>
    10b0:	93 30       	cpi	r25, 0x03	; 3
    10b2:	91 f1       	breq	.+100    	; 0x1118 <USB_Device_ProcessControlRequest+0xb0>
    10b4:	22 c1       	rjmp	.+580    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
    10b6:	98 30       	cpi	r25, 0x08	; 8
    10b8:	09 f4       	brne	.+2      	; 0x10bc <USB_Device_ProcessControlRequest+0x54>
    10ba:	ef c0       	rjmp	.+478    	; 0x129a <USB_Device_ProcessControlRequest+0x232>
    10bc:	99 30       	cpi	r25, 0x09	; 9
    10be:	09 f4       	brne	.+2      	; 0x10c2 <USB_Device_ProcessControlRequest+0x5a>
    10c0:	fb c0       	rjmp	.+502    	; 0x12b8 <USB_Device_ProcessControlRequest+0x250>
    10c2:	96 30       	cpi	r25, 0x06	; 6
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <USB_Device_ProcessControlRequest+0x60>
    10c6:	19 c1       	rjmp	.+562    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
    10c8:	94 c0       	rjmp	.+296    	; 0x11f2 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10ca:	80 38       	cpi	r24, 0x80	; 128
    10cc:	21 f0       	breq	.+8      	; 0x10d6 <USB_Device_ProcessControlRequest+0x6e>
    10ce:	82 38       	cpi	r24, 0x82	; 130
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <USB_Device_ProcessControlRequest+0x6c>
    10d2:	13 c1       	rjmp	.+550    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
    10d4:	08 c0       	rjmp	.+16     	; 0x10e6 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    10d6:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    10da:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <USB_Device_RemoteWakeupEnabled>
    10de:	99 23       	and	r25, r25
    10e0:	89 f0       	breq	.+34     	; 0x1104 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    10e2:	82 60       	ori	r24, 0x02	; 2
    10e4:	0f c0       	rjmp	.+30     	; 0x1104 <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10e6:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <USB_ControlRequest+0x4>
    10ea:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    10ec:	87 30       	cpi	r24, 0x07	; 7
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <USB_Device_ProcessControlRequest+0x8a>
    10f0:	04 c1       	rjmp	.+520    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10f2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10f6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    10fa:	85 fb       	bst	r24, 5
    10fc:	88 27       	eor	r24, r24
    10fe:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1100:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1104:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1108:	97 7f       	andi	r25, 0xF7	; 247
    110a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    110e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
    1112:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1116:	cc c0       	rjmp	.+408    	; 0x12b0 <USB_Device_ProcessControlRequest+0x248>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1118:	28 2f       	mov	r18, r24
    111a:	2d 7f       	andi	r18, 0xFD	; 253
    111c:	09 f0       	breq	.+2      	; 0x1120 <USB_Device_ProcessControlRequest+0xb8>
    111e:	ed c0       	rjmp	.+474    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1120:	88 23       	and	r24, r24
    1122:	19 f0       	breq	.+6      	; 0x112a <USB_Device_ProcessControlRequest+0xc2>
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	61 f0       	breq	.+24     	; 0x1140 <USB_Device_ProcessControlRequest+0xd8>
    1128:	e8 c0       	rjmp	.+464    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    112a:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	09 f0       	breq	.+2      	; 0x1134 <USB_Device_ProcessControlRequest+0xcc>
    1132:	e3 c0       	rjmp	.+454    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1134:	93 30       	cpi	r25, 0x03	; 3
    1136:	09 f0       	breq	.+2      	; 0x113a <USB_Device_ProcessControlRequest+0xd2>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <USB_Device_RemoteWakeupEnabled>
    113e:	2e c0       	rjmp	.+92     	; 0x119c <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1140:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    1144:	81 11       	cpse	r24, r1
    1146:	2a c0       	rjmp	.+84     	; 0x119c <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1148:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <USB_ControlRequest+0x4>
    114c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    114e:	2f ef       	ldi	r18, 0xFF	; 255
    1150:	28 0f       	add	r18, r24
    1152:	26 30       	cpi	r18, 0x06	; 6
    1154:	08 f0       	brcs	.+2      	; 0x1158 <USB_Device_ProcessControlRequest+0xf0>
    1156:	d1 c0       	rjmp	.+418    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1158:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    115c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1160:	20 ff       	sbrs	r18, 0
    1162:	1c c0       	rjmp	.+56     	; 0x119c <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1164:	93 30       	cpi	r25, 0x03	; 3
    1166:	21 f4       	brne	.+8      	; 0x1170 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1168:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    116c:	80 62       	ori	r24, 0x20	; 32
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1170:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1174:	90 61       	ori	r25, 0x10	; 16
    1176:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    117a:	21 e0       	ldi	r18, 0x01	; 1
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	a9 01       	movw	r20, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <USB_Device_ProcessControlRequest+0x11e>
    1182:	44 0f       	add	r20, r20
    1184:	55 1f       	adc	r21, r21
    1186:	8a 95       	dec	r24
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <USB_Device_ProcessControlRequest+0x11a>
    118a:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
    118e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1192:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1196:	88 60       	ori	r24, 0x08	; 8
    1198:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    119c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    11a4:	87 7f       	andi	r24, 0xF7	; 247
    11a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    11aa:	e9 dd       	rcall	.-1070   	; 0xd7e <Endpoint_ClearStatusStage>
    11ac:	a6 c0       	rjmp	.+332    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    11ae:	81 11       	cpse	r24, r1
    11b0:	a4 c0       	rjmp	.+328    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    11b2:	10 91 81 05 	lds	r17, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    11b6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    11b8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    11bc:	80 78       	andi	r24, 0x80	; 128
    11be:	81 2b       	or	r24, r17
    11c0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    11c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    11c8:	87 7f       	andi	r24, 0xF7	; 247
    11ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    11ce:	d7 dd       	rcall	.-1106   	; 0xd7e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
    11d4:	80 ff       	sbrs	r24, 0
    11d6:	fc cf       	rjmp	.-8      	; 0x11d0 <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    11d8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    11dc:	80 68       	ori	r24, 0x80	; 128
    11de:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    11e2:	11 11       	cpse	r17, r1
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <USB_Device_ProcessControlRequest+0x182>
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <USB_Device_ProcessControlRequest+0x184>
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <USB_DeviceState>
    11f0:	84 c0       	rjmp	.+264    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11f2:	80 58       	subi	r24, 0x80	; 128
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <USB_Device_ProcessControlRequest+0x192>
    11f8:	80 c0       	rjmp	.+256    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    11fa:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    11fe:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <USB_ControlRequest+0x3>
    1202:	8c 3d       	cpi	r24, 0xDC	; 220
    1204:	53 e0       	ldi	r21, 0x03	; 3
    1206:	95 07       	cpc	r25, r21
    1208:	71 f5       	brne	.+92     	; 0x1266 <USB_Device_ProcessControlRequest+0x1fe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    120e:	8a e2       	ldi	r24, 0x2A	; 42
    1210:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1212:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1214:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1216:	de 01       	movw	r26, r28
    1218:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    121a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    121c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    121e:	51 e2       	ldi	r21, 0x21	; 33
    1220:	e3 2f       	mov	r30, r19
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    1228:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    122a:	20 ff       	sbrs	r18, 0
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
    122e:	e2 95       	swap	r30
    1230:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1232:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1234:	ef 70       	andi	r30, 0x0F	; 15
    1236:	8e 2f       	mov	r24, r30
    1238:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    123a:	ea 30       	cpi	r30, 0x0A	; 10
    123c:	10 f0       	brcs	.+4      	; 0x1242 <USB_Device_ProcessControlRequest+0x1da>
    123e:	c7 96       	adiw	r24, 0x37	; 55
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <USB_Device_ProcessControlRequest+0x1dc>
    1242:	c0 96       	adiw	r24, 0x30	; 48
    1244:	8d 93       	st	X+, r24
    1246:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1248:	2f 5f       	subi	r18, 0xFF	; 255
    124a:	24 31       	cpi	r18, 0x14	; 20
    124c:	49 f7       	brne	.-46     	; 0x1220 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    124e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1250:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1254:	87 7f       	andi	r24, 0xF7	; 247
    1256:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    125a:	6a e2       	ldi	r22, 0x2A	; 42
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	ce 01       	movw	r24, r28
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	1c dc       	rcall	.-1992   	; 0xa9c <Endpoint_Write_Control_Stream_LE>
    1264:	14 c0       	rjmp	.+40     	; 0x128e <USB_Device_ProcessControlRequest+0x226>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1266:	60 91 83 05 	lds	r22, 0x0583	; 0x800583 <USB_ControlRequest+0x4>
    126a:	70 91 84 05 	lds	r23, 0x0584	; 0x800584 <USB_ControlRequest+0x5>
    126e:	ae 01       	movw	r20, r28
    1270:	4f 5f       	subi	r20, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	88 db       	rcall	.-2288   	; 0x986 <CALLBACK_USB_GetDescriptor>
    1276:	bc 01       	movw	r22, r24
    1278:	89 2b       	or	r24, r25
    127a:	09 f4       	brne	.+2      	; 0x127e <USB_Device_ProcessControlRequest+0x216>
    127c:	3e c0       	rjmp	.+124    	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
    127e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1282:	97 7f       	andi	r25, 0xF7	; 247
    1284:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	a5 dc       	rcall	.-1718   	; 0xbd8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    128e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1292:	8b 77       	andi	r24, 0x7B	; 123
    1294:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1298:	30 c0       	rjmp	.+96     	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    129a:	80 38       	cpi	r24, 0x80	; 128
    129c:	71 f5       	brne	.+92     	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    129e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    12a2:	87 7f       	andi	r24, 0xF7	; 247
    12a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    12a8:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12ac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    12b4:	8e 77       	andi	r24, 0x7E	; 126
    12b6:	77 cf       	rjmp	.-274    	; 0x11a6 <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    12b8:	81 11       	cpse	r24, r1
    12ba:	1f c0       	rjmp	.+62     	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    12bc:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    12c0:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <USB_ControlRequest+0x3>
    12c4:	99 27       	eor	r25, r25
    12c6:	02 97       	sbiw	r24, 0x02	; 2
    12c8:	c4 f4       	brge	.+48     	; 0x12fa <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    12ce:	87 7f       	andi	r24, 0xF7	; 247
    12d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    12d4:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    12d8:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    12dc:	50 dd       	rcall	.-1376   	; 0xd7e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    12de:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <USB_Device_ConfigurationNumber>
    12e2:	81 11       	cpse	r24, r1
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    12e6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    12ea:	87 fd       	sbrc	r24, 7
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <USB_Device_ProcessControlRequest+0x28a>
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <USB_Device_ProcessControlRequest+0x28c>
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    12f8:	c1 d9       	rcall	.-3198   	; 0x67c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    12fe:	83 ff       	sbrs	r24, 3
    1300:	0a c0       	rjmp	.+20     	; 0x1316 <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1302:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1306:	87 7f       	andi	r24, 0xF7	; 247
    1308:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    130c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1310:	80 62       	ori	r24, 0x20	; 32
    1312:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1316:	aa 96       	adiw	r28, 0x2a	; 42
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	08 95       	ret

0000132a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    132a:	08 95       	ret

0000132c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    132c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    132e:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>
    1332:	88 23       	and	r24, r24
    1334:	99 f0       	breq	.+38     	; 0x135c <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1336:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    133a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    133c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1340:	89 2f       	mov	r24, r25
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	90 fd       	sbrc	r25, 0
    1346:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1348:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    134a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    134e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1352:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1354:	89 de       	rcall	.-750    	; 0x1068 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1356:	cf 70       	andi	r28, 0x0F	; 15
    1358:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1360:	6f 92       	push	r6
    1362:	7f 92       	push	r7
    1364:	8f 92       	push	r8
    1366:	9f 92       	push	r9
    1368:	af 92       	push	r10
    136a:	bf 92       	push	r11
    136c:	cf 92       	push	r12
    136e:	df 92       	push	r13
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	00 d0       	rcall	.+0      	; 0x137e <HID_Device_ProcessControlRequest+0x1e>
    137e:	1f 92       	push	r1
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1386:	ad b6       	in	r10, 0x3d	; 61
    1388:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    138a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    138e:	83 ff       	sbrs	r24, 3
    1390:	03 c1       	rjmp	.+518    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1392:	f7 01       	movw	r30, r14
    1394:	80 81       	ld	r24, Z
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <USB_ControlRequest+0x4>
    139c:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <USB_ControlRequest+0x5>
    13a0:	28 17       	cp	r18, r24
    13a2:	39 07       	cpc	r19, r25
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <HID_Device_ProcessControlRequest+0x48>
    13a6:	f8 c0       	rjmp	.+496    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
	  return;

	switch (USB_ControlRequest.bRequest)
    13a8:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <USB_ControlRequest+0x1>
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <HID_Device_ProcessControlRequest+0x52>
    13b0:	9a c0       	rjmp	.+308    	; 0x14e6 <HID_Device_ProcessControlRequest+0x186>
    13b2:	30 f4       	brcc	.+12     	; 0x13c0 <HID_Device_ProcessControlRequest+0x60>
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	71 f0       	breq	.+28     	; 0x13d4 <HID_Device_ProcessControlRequest+0x74>
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	09 f4       	brne	.+2      	; 0x13be <HID_Device_ProcessControlRequest+0x5e>
    13bc:	d1 c0       	rjmp	.+418    	; 0x1560 <HID_Device_ProcessControlRequest+0x200>
    13be:	ec c0       	rjmp	.+472    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
    13c0:	8a 30       	cpi	r24, 0x0A	; 10
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <HID_Device_ProcessControlRequest+0x66>
    13c4:	b5 c0       	rjmp	.+362    	; 0x1530 <HID_Device_ProcessControlRequest+0x1d0>
    13c6:	8b 30       	cpi	r24, 0x0B	; 11
    13c8:	09 f4       	brne	.+2      	; 0x13cc <HID_Device_ProcessControlRequest+0x6c>
    13ca:	9e c0       	rjmp	.+316    	; 0x1508 <HID_Device_ProcessControlRequest+0x1a8>
    13cc:	89 30       	cpi	r24, 0x09	; 9
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <HID_Device_ProcessControlRequest+0x72>
    13d0:	e3 c0       	rjmp	.+454    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
    13d2:	4c c0       	rjmp	.+152    	; 0x146c <HID_Device_ProcessControlRequest+0x10c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13d4:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USB_ControlRequest>
    13d8:	81 3a       	cpi	r24, 0xA1	; 161
    13da:	09 f0       	breq	.+2      	; 0x13de <HID_Device_ProcessControlRequest+0x7e>
    13dc:	dd c0       	rjmp	.+442    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
			{
    13de:	8d b6       	in	r8, 0x3d	; 61
    13e0:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
    13e2:	1a 82       	std	Y+2, r1	; 0x02
    13e4:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    13e6:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    13ea:	10 91 82 05 	lds	r17, 0x0582	; 0x800582 <USB_ControlRequest+0x3>
    13ee:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    13f0:	f7 01       	movw	r30, r14
    13f2:	80 85       	ldd	r24, Z+8	; 0x08
    13f4:	48 2f       	mov	r20, r24
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	8d b7       	in	r24, 0x3d	; 61
    13fa:	9e b7       	in	r25, 0x3e	; 62
    13fc:	84 1b       	sub	r24, r20
    13fe:	95 0b       	sbc	r25, r21
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	9e bf       	out	0x3e, r25	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	8d bf       	out	0x3d, r24	; 61
    140a:	ed b7       	in	r30, 0x3d	; 61
    140c:	fe b7       	in	r31, 0x3e	; 62
    140e:	31 96       	adiw	r30, 0x01	; 1
    1410:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	cf 01       	movw	r24, r30
    1418:	65 d3       	rcall	.+1738   	; 0x1ae4 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    141a:	4f ef       	ldi	r20, 0xFF	; 255
    141c:	41 0f       	add	r20, r17
    141e:	8e 01       	movw	r16, r28
    1420:	0f 5f       	subi	r16, 0xFF	; 255
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	96 01       	movw	r18, r12
    1426:	be 01       	movw	r22, r28
    1428:	6d 5f       	subi	r22, 0xFD	; 253
    142a:	7f 4f       	sbci	r23, 0xFF	; 255
    142c:	c7 01       	movw	r24, r14
    142e:	3e d9       	rcall	.-3460   	; 0x6ac <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1430:	f7 01       	movw	r30, r14
    1432:	86 81       	ldd	r24, Z+6	; 0x06
    1434:	97 81       	ldd	r25, Z+7	; 0x07
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	21 f0       	breq	.+8      	; 0x1442 <HID_Device_ProcessControlRequest+0xe2>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    143a:	40 85       	ldd	r20, Z+8	; 0x08
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	b6 01       	movw	r22, r12
    1440:	48 d3       	rcall	.+1680   	; 0x1ad2 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1442:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1446:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    144a:	87 7f       	andi	r24, 0xF7	; 247
    144c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1454:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1458:	69 81       	ldd	r22, Y+1	; 0x01
    145a:	7a 81       	ldd	r23, Y+2	; 0x02
    145c:	c6 01       	movw	r24, r12
    145e:	1e db       	rcall	.-2500   	; 0xa9c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1460:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1464:	8b 77       	andi	r24, 0x7B	; 123
    1466:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    146a:	37 c0       	rjmp	.+110    	; 0x14da <HID_Device_ProcessControlRequest+0x17a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    146c:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USB_ControlRequest>
    1470:	81 32       	cpi	r24, 0x21	; 33
    1472:	09 f0       	breq	.+2      	; 0x1476 <HID_Device_ProcessControlRequest+0x116>
    1474:	91 c0       	rjmp	.+290    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
			{
    1476:	8d b6       	in	r8, 0x3d	; 61
    1478:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    147a:	00 91 85 05 	lds	r16, 0x0585	; 0x800585 <USB_ControlRequest+0x6>
    147e:	10 91 86 05 	lds	r17, 0x0586	; 0x800586 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1482:	70 90 81 05 	lds	r7, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    1486:	60 90 82 05 	lds	r6, 0x0582	; 0x800582 <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    148a:	8d b7       	in	r24, 0x3d	; 61
    148c:	9e b7       	in	r25, 0x3e	; 62
    148e:	80 1b       	sub	r24, r16
    1490:	91 0b       	sbc	r25, r17
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	9e bf       	out	0x3e, r25	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	8d bf       	out	0x3d, r24	; 61
    149c:	ed b7       	in	r30, 0x3d	; 61
    149e:	fe b7       	in	r31, 0x3e	; 62
    14a0:	31 96       	adiw	r30, 0x01	; 1
    14a2:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14a8:	87 7f       	andi	r24, 0xF7	; 247
    14aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    14ae:	b8 01       	movw	r22, r16
    14b0:	cf 01       	movw	r24, r30
    14b2:	52 db       	rcall	.-2396   	; 0xb58 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14b8:	8e 77       	andi	r24, 0x7E	; 126
    14ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	71 10       	cpse	r7, r1
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <HID_Device_ProcessControlRequest+0x166>
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	02 1b       	sub	r16, r18
    14ca:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    14cc:	2c 0d       	add	r18, r12

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    14ce:	3d 1d       	adc	r19, r13
    14d0:	4f ef       	ldi	r20, 0xFF	; 255
    14d2:	46 0d       	add	r20, r6
    14d4:	67 2d       	mov	r22, r7
    14d6:	c7 01       	movw	r24, r14
    14d8:	ff d8       	rcall	.-3586   	; 0x6d8 <CALLBACK_HID_Device_ProcessHIDReport>
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	9e be       	out	0x3e, r9	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	8d be       	out	0x3d, r8	; 61
    14e4:	59 c0       	rjmp	.+178    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14e6:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USB_ControlRequest>
    14ea:	81 3a       	cpi	r24, 0xA1	; 161
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <HID_Device_ProcessControlRequest+0x190>
    14ee:	54 c0       	rjmp	.+168    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    14f4:	87 7f       	andi	r24, 0xF7	; 247
    14f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    14fe:	80 ff       	sbrs	r24, 0
    1500:	fc cf       	rjmp	.-8      	; 0x14fa <HID_Device_ProcessControlRequest+0x19a>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1502:	f7 01       	movw	r30, r14
    1504:	81 85       	ldd	r24, Z+9	; 0x09
    1506:	40 c0       	rjmp	.+128    	; 0x1588 <HID_Device_ProcessControlRequest+0x228>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1508:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USB_ControlRequest>
    150c:	81 32       	cpi	r24, 0x21	; 33
    150e:	09 f0       	breq	.+2      	; 0x1512 <HID_Device_ProcessControlRequest+0x1b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1510:	43 c0       	rjmp	.+134    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
    1512:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1516:	87 7f       	andi	r24, 0xF7	; 247
    1518:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    151c:	30 dc       	rcall	.-1952   	; 0xd7e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    151e:	90 91 81 05 	lds	r25, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	91 11       	cpse	r25, r1
    1526:	01 c0       	rjmp	.+2      	; 0x152a <HID_Device_ProcessControlRequest+0x1ca>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	f7 01       	movw	r30, r14
    152c:	81 87       	std	Z+9, r24	; 0x09
    152e:	34 c0       	rjmp	.+104    	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1530:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USB_ControlRequest>
    1534:	81 32       	cpi	r24, 0x21	; 33
    1536:	81 f5       	brne	.+96     	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
    1538:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    153c:	87 7f       	andi	r24, 0xF7	; 247
    153e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1542:	1d dc       	rcall	.-1990   	; 0xd7e <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1544:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <USB_ControlRequest+0x2>
    1548:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <USB_ControlRequest+0x3>
    154c:	88 27       	eor	r24, r24
    154e:	36 e0       	ldi	r19, 0x06	; 6
    1550:	96 95       	lsr	r25
    1552:	87 95       	ror	r24
    1554:	3a 95       	dec	r19
    1556:	e1 f7       	brne	.-8      	; 0x1550 <HID_Device_ProcessControlRequest+0x1f0>
    1558:	f7 01       	movw	r30, r14
    155a:	95 87       	std	Z+13, r25	; 0x0d
    155c:	84 87       	std	Z+12, r24	; 0x0c
    155e:	1c c0       	rjmp	.+56     	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1560:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <USB_ControlRequest>
    1564:	81 3a       	cpi	r24, 0xA1	; 161
    1566:	c1 f4       	brne	.+48     	; 0x1598 <HID_Device_ProcessControlRequest+0x238>
    1568:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    156c:	87 7f       	andi	r24, 0xF7	; 247
    156e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1572:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1576:	80 ff       	sbrs	r24, 0
    1578:	fc cf       	rjmp	.-8      	; 0x1572 <HID_Device_ProcessControlRequest+0x212>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    157a:	f7 01       	movw	r30, r14
    157c:	84 85       	ldd	r24, Z+12	; 0x0c
    157e:	95 85       	ldd	r25, Z+13	; 0x0d
    1580:	96 95       	lsr	r25
    1582:	87 95       	ror	r24
    1584:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1586:	87 95       	ror	r24
    1588:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    158c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1590:	8e 77       	andi	r24, 0x7E	; 126
    1592:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1596:	f3 db       	rcall	.-2074   	; 0xd7e <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	be be       	out	0x3e, r11	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	ad be       	out	0x3d, r10	; 61
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	af 90       	pop	r10
    15bc:	9f 90       	pop	r9
    15be:	8f 90       	pop	r8
    15c0:	7f 90       	pop	r7
    15c2:	6f 90       	pop	r6
    15c4:	08 95       	ret

000015c6 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    15c6:	fc 01       	movw	r30, r24
    15c8:	39 96       	adiw	r30, 0x09	; 9
    15ca:	27 e0       	ldi	r18, 0x07	; 7
    15cc:	df 01       	movw	r26, r30
    15ce:	1d 92       	st	X+, r1
    15d0:	2a 95       	dec	r18
    15d2:	e9 f7       	brne	.-6      	; 0x15ce <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	fc 01       	movw	r30, r24
    15d8:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    15da:	24 ef       	ldi	r18, 0xF4	; 244
    15dc:	31 e0       	ldi	r19, 0x01	; 1
    15de:	35 87       	std	Z+13, r19	; 0x0d
    15e0:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    15e2:	23 e0       	ldi	r18, 0x03	; 3
    15e4:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	8c cb       	rjmp	.-2280   	; 0xd04 <Endpoint_ConfigureEndpointTable>

000015ec <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    15ec:	5f 92       	push	r5
    15ee:	6f 92       	push	r6
    15f0:	7f 92       	push	r7
    15f2:	8f 92       	push	r8
    15f4:	9f 92       	push	r9
    15f6:	af 92       	push	r10
    15f8:	bf 92       	push	r11
    15fa:	cf 92       	push	r12
    15fc:	df 92       	push	r13
    15fe:	ef 92       	push	r14
    1600:	ff 92       	push	r15
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	00 d0       	rcall	.+0      	; 0x160c <HID_Device_USBTask+0x20>
    160c:	1f 92       	push	r1
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1614:	ad b6       	in	r10, 0x3d	; 61
    1616:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1618:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <USB_DeviceState>
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	09 f0       	breq	.+2      	; 0x1622 <HID_Device_USBTask+0x36>
    1620:	86 c0       	rjmp	.+268    	; 0x172e <HID_Device_USBTask+0x142>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1622:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1626:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    162a:	f7 01       	movw	r30, r14
    162c:	22 85       	ldd	r18, Z+10	; 0x0a
    162e:	33 85       	ldd	r19, Z+11	; 0x0b
    1630:	28 17       	cp	r18, r24
    1632:	39 07       	cpc	r19, r25
    1634:	09 f4       	brne	.+2      	; 0x1638 <HID_Device_USBTask+0x4c>
    1636:	7b c0       	rjmp	.+246    	; 0x172e <HID_Device_USBTask+0x142>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1638:	81 81       	ldd	r24, Z+1	; 0x01
    163a:	8f 70       	andi	r24, 0x0F	; 15
    163c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1640:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1644:	85 ff       	sbrs	r24, 5
    1646:	73 c0       	rjmp	.+230    	; 0x172e <HID_Device_USBTask+0x142>
	{
    1648:	8d b6       	in	r8, 0x3d	; 61
    164a:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    164c:	40 85       	ldd	r20, Z+8	; 0x08
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	8d b7       	in	r24, 0x3d	; 61
    1652:	9e b7       	in	r25, 0x3e	; 62
    1654:	84 1b       	sub	r24, r20
    1656:	95 0b       	sbc	r25, r21
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	9e bf       	out	0x3e, r25	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	8d bf       	out	0x3d, r24	; 61
    1662:	ed b7       	in	r30, 0x3d	; 61
    1664:	fe b7       	in	r31, 0x3e	; 62
    1666:	31 96       	adiw	r30, 0x01	; 1
    1668:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    166a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    166c:	1a 82       	std	Y+2, r1	; 0x02
    166e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	cf 01       	movw	r24, r30
    1676:	36 d2       	rcall	.+1132   	; 0x1ae4 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1678:	8e 01       	movw	r16, r28
    167a:	0f 5f       	subi	r16, 0xFF	; 255
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	96 01       	movw	r18, r12
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	be 01       	movw	r22, r28
    1684:	6d 5f       	subi	r22, 0xFD	; 253
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	c7 01       	movw	r24, r14
    168a:	10 d8       	rcall	.-4064   	; 0x6ac <CALLBACK_HID_Device_CreateHIDReport>
    168c:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    168e:	f7 01       	movw	r30, r14
    1690:	84 85       	ldd	r24, Z+12	; 0x0c
    1692:	95 85       	ldd	r25, Z+13	; 0x0d
    1694:	89 2b       	or	r24, r25
    1696:	29 f0       	breq	.+10     	; 0x16a2 <HID_Device_USBTask+0xb6>
    1698:	11 e0       	ldi	r17, 0x01	; 1
    169a:	86 85       	ldd	r24, Z+14	; 0x0e
    169c:	97 85       	ldd	r25, Z+15	; 0x0f
    169e:	89 2b       	or	r24, r25
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <HID_Device_USBTask+0xb8>
    16a2:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    16a4:	f7 01       	movw	r30, r14
    16a6:	66 80       	ldd	r6, Z+6	; 0x06
    16a8:	77 80       	ldd	r7, Z+7	; 0x07
    16aa:	61 14       	cp	r6, r1
    16ac:	71 04       	cpc	r7, r1
    16ae:	81 f0       	breq	.+32     	; 0x16d0 <HID_Device_USBTask+0xe4>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    16b0:	49 81       	ldd	r20, Y+1	; 0x01
    16b2:	5a 81       	ldd	r21, Y+2	; 0x02
    16b4:	b3 01       	movw	r22, r6
    16b6:	c6 01       	movw	r24, r12
    16b8:	ff d1       	rcall	.+1022   	; 0x1ab8 <memcmp>
    16ba:	01 e0       	ldi	r16, 0x01	; 1
    16bc:	89 2b       	or	r24, r25
    16be:	09 f4       	brne	.+2      	; 0x16c2 <HID_Device_USBTask+0xd6>
    16c0:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    16c2:	f7 01       	movw	r30, r14
    16c4:	40 85       	ldd	r20, Z+8	; 0x08
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	b6 01       	movw	r22, r12
    16ca:	c3 01       	movw	r24, r6
    16cc:	02 d2       	rcall	.+1028   	; 0x1ad2 <memcpy>
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <HID_Device_USBTask+0xe6>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    16d0:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	89 2b       	or	r24, r25
    16d8:	f1 f0       	breq	.+60     	; 0x1716 <HID_Device_USBTask+0x12a>
    16da:	51 10       	cpse	r5, r1
    16dc:	04 c0       	rjmp	.+8      	; 0x16e6 <HID_Device_USBTask+0xfa>
    16de:	01 11       	cpse	r16, r1
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <HID_Device_USBTask+0xfa>
    16e2:	10 ff       	sbrs	r17, 0
    16e4:	18 c0       	rjmp	.+48     	; 0x1716 <HID_Device_USBTask+0x12a>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    16e6:	f7 01       	movw	r30, r14
    16e8:	84 85       	ldd	r24, Z+12	; 0x0c
    16ea:	95 85       	ldd	r25, Z+13	; 0x0d
    16ec:	97 87       	std	Z+15, r25	; 0x0f
    16ee:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16f0:	81 81       	ldd	r24, Z+1	; 0x01
    16f2:	8f 70       	andi	r24, 0x0F	; 15
    16f4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16fc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1700:	69 81       	ldd	r22, Y+1	; 0x01
    1702:	7a 81       	ldd	r23, Y+2	; 0x02
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	c6 01       	movw	r24, r12
    170a:	7e d9       	rcall	.-3332   	; 0xa08 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    170c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1710:	8e 77       	andi	r24, 0x7E	; 126
    1712:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1716:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    171a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    171e:	f7 01       	movw	r30, r14
    1720:	93 87       	std	Z+11, r25	; 0x0b
    1722:	82 87       	std	Z+10, r24	; 0x0a
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	9e be       	out	0x3e, r9	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	8d be       	out	0x3d, r8	; 61
	}
}
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	be be       	out	0x3e, r11	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	ad be       	out	0x3d, r10	; 61
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	df 90       	pop	r13
    174c:	cf 90       	pop	r12
    174e:	bf 90       	pop	r11
    1750:	af 90       	pop	r10
    1752:	9f 90       	pop	r9
    1754:	8f 90       	pop	r8
    1756:	7f 90       	pop	r7
    1758:	6f 90       	pop	r6
    175a:	5f 90       	pop	r5
    175c:	08 95       	ret

0000175e <SSD1306_Send_StartAndSLAW>:
    return status;
  }

  // success
  return SSD1306_SUCCESS;
}
    175e:	cf 93       	push	r28
    1760:	c8 2f       	mov	r28, r24
    1762:	61 d1       	rcall	.+706    	; 0x1a26 <TWI_MT_Start>
    1764:	81 11       	cpse	r24, r1
    1766:	03 c0       	rjmp	.+6      	; 0x176e <SSD1306_Send_StartAndSLAW+0x10>
    1768:	8c 2f       	mov	r24, r28
    176a:	cf 91       	pop	r28
    176c:	78 c1       	rjmp	.+752    	; 0x1a5e <TWI_MT_Send_SLAW>
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <SSD1306_Send_Command>:
    1772:	cf 93       	push	r28
    1774:	c8 2f       	mov	r28, r24
    1776:	80 e8       	ldi	r24, 0x80	; 128
    1778:	87 d1       	rcall	.+782    	; 0x1a88 <TWI_MT_Send_Data>
    177a:	81 11       	cpse	r24, r1
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <SSD1306_Send_Command+0x12>
    177e:	8c 2f       	mov	r24, r28
    1780:	cf 91       	pop	r28
    1782:	82 c1       	rjmp	.+772    	; 0x1a88 <TWI_MT_Send_Data>
    1784:	cf 91       	pop	r28
    1786:	08 95       	ret

00001788 <SSD1306_Init>:
    1788:	ff 92       	push	r15
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	d8 2f       	mov	r29, r24
    1794:	ec e4       	ldi	r30, 0x4C	; 76
    1796:	f3 e0       	ldi	r31, 0x03	; 3
    1798:	c4 91       	lpm	r28, Z
    179a:	3a d1       	rcall	.+628    	; 0x1a10 <TWI_Init>
    179c:	8d 2f       	mov	r24, r29
    179e:	df df       	rcall	.-66     	; 0x175e <SSD1306_Send_StartAndSLAW>
    17a0:	81 11       	cpse	r24, r1
    17a2:	1c c0       	rjmp	.+56     	; 0x17dc <SSD1306_Init+0x54>
    17a4:	d0 e0       	ldi	r29, 0x00	; 0
    17a6:	ed e4       	ldi	r30, 0x4D	; 77
    17a8:	f3 e0       	ldi	r31, 0x03	; 3
    17aa:	20 97       	sbiw	r28, 0x00	; 0
    17ac:	a9 f0       	breq	.+42     	; 0x17d8 <SSD1306_Init+0x50>
    17ae:	f4 90       	lpm	r15, Z
    17b0:	8f 01       	movw	r16, r30
    17b2:	0e 5f       	subi	r16, 0xFE	; 254
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	31 96       	adiw	r30, 0x01	; 1
    17b8:	84 91       	lpm	r24, Z
    17ba:	db df       	rcall	.-74     	; 0x1772 <SSD1306_Send_Command>
    17bc:	81 11       	cpse	r24, r1
    17be:	0e c0       	rjmp	.+28     	; 0x17dc <SSD1306_Init+0x54>
    17c0:	f8 01       	movw	r30, r16
    17c2:	ff 20       	and	r15, r15
    17c4:	39 f0       	breq	.+14     	; 0x17d4 <SSD1306_Init+0x4c>
    17c6:	f8 01       	movw	r30, r16
    17c8:	84 91       	lpm	r24, Z
    17ca:	d3 df       	rcall	.-90     	; 0x1772 <SSD1306_Send_Command>
    17cc:	fa 94       	dec	r15
    17ce:	0f 5f       	subi	r16, 0xFF	; 255
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	f4 cf       	rjmp	.-24     	; 0x17bc <SSD1306_Init+0x34>
    17d4:	21 97       	sbiw	r28, 0x01	; 1
    17d6:	e9 cf       	rjmp	.-46     	; 0x17aa <SSD1306_Init+0x22>
    17d8:	6b d1       	rcall	.+726    	; 0x1ab0 <TWI_Stop>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	08 95       	ret

000017e8 <SSD1306_UpdateScreen>:
 * @param   uint8_t address
 *
 * @return  uint8_t
 */
uint8_t SSD1306_UpdateScreen (uint8_t address)
{
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
  // init i
  uint16_t i = 0;

  // TWI: start & SLAW
  // -------------------------------------------------------------------------------------
  status = SSD1306_Send_StartAndSLAW (address);
    17ec:	b8 df       	rcall	.-144    	; 0x175e <SSD1306_Send_StartAndSLAW>
  // request succesfull
  if (SSD1306_SUCCESS != status) {
    17ee:	81 11       	cpse	r24, r1
    17f0:	10 c0       	rjmp	.+32     	; 0x1812 <SSD1306_UpdateScreen+0x2a>
    return status;
  }

  // control byte data stream
  // -------------------------------------------------------------------------------------   
  status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);
    17f2:	80 e4       	ldi	r24, 0x40	; 64
    17f4:	49 d1       	rcall	.+658    	; 0x1a88 <TWI_MT_Send_Data>
  // request succesfull
  if (SSD1306_SUCCESS != status) {
    17f6:	81 11       	cpse	r24, r1
    17f8:	0c c0       	rjmp	.+24     	; 0x1812 <SSD1306_UpdateScreen+0x2a>
    17fa:	cc e5       	ldi	r28, 0x5C	; 92

  //  send cache memory lcd
  // -------------------------------------------------------------------------------------
  while (i < CACHE_SIZE_MEM) {
    // send data
    status = TWI_MT_Send_Data (cacheMemLcd[i]);
    17fc:	d1 e0       	ldi	r29, 0x01	; 1
    17fe:	89 91       	ld	r24, Y+
    1800:	43 d1       	rcall	.+646    	; 0x1a88 <TWI_MT_Send_Data>
    // request succesfull
    if (SSD1306_SUCCESS != status) {
    1802:	81 11       	cpse	r24, r1
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <SSD1306_UpdateScreen+0x2a>
    return status;
  }

  //  send cache memory lcd
  // -------------------------------------------------------------------------------------
  while (i < CACHE_SIZE_MEM) {
    1806:	85 e0       	ldi	r24, 0x05	; 5
    1808:	cc 35       	cpi	r28, 0x5C	; 92
    180a:	d8 07       	cpc	r29, r24
    // increment
    i++;
  }

  // stop TWI
  TWI_Stop ();
    180c:	c1 f7       	brne	.-16     	; 0x17fe <SSD1306_UpdateScreen+0x16>
    180e:	50 d1       	rcall	.+672    	; 0x1ab0 <TWI_Stop>

  // success
  return SSD1306_SUCCESS;
    1810:	80 e0       	ldi	r24, 0x00	; 0
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <SSD1306_ClearScreen>:
 * @return  void
 */
void SSD1306_ClearScreen (void)
{
  // null cache memory lcd
  memset (cacheMemLcd, 0x00, CACHE_SIZE_MEM);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	94 e0       	ldi	r25, 0x04	; 4
    181c:	ec e5       	ldi	r30, 0x5C	; 92
    181e:	f1 e0       	ldi	r31, 0x01	; 1
    1820:	df 01       	movw	r26, r30
    1822:	9c 01       	movw	r18, r24
    1824:	1d 92       	st	X+, r1
    1826:	21 50       	subi	r18, 0x01	; 1
    1828:	30 40       	sbci	r19, 0x00	; 0
    182a:	e1 f7       	brne	.-8      	; 0x1824 <SSD1306_ClearScreen+0xc>
    182c:	08 95       	ret

0000182e <SSD1306_SetPosition>:
 * @return  void
 */
void SSD1306_SetPosition (uint8_t x, uint8_t y) 
{
  // calculate counter
  _counter = x + (y << 7);
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	20 e8       	ldi	r18, 0x80	; 128
    1832:	62 9f       	mul	r22, r18
    1834:	80 0d       	add	r24, r0
    1836:	91 1d       	adc	r25, r1
    1838:	11 24       	eor	r1, r1
    183a:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <_counter+0x1>
    183e:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <_counter>
    1842:	08 95       	ret

00001844 <SSD1306_UpdatePosition>:
 * @return  uint8_t
 */
uint8_t SSD1306_UpdatePosition (void) 
{
  // y / 8
  uint8_t y = _counter >> 7;
    1844:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <_counter>
    1848:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <_counter+0x1>
    184c:	c9 01       	movw	r24, r18
    184e:	88 0f       	add	r24, r24
    1850:	89 2f       	mov	r24, r25
    1852:	88 1f       	adc	r24, r24
    1854:	99 0b       	sbc	r25, r25
    1856:	91 95       	neg	r25
  uint8_t x = _counter - (y << 7);
  // x + character length + 1
  uint8_t x_new = x + CHARS_COLS_LENGTH + 1;

  // check position
  if (x_new > END_COLUMN_ADDR) {
    1858:	2a 5f       	subi	r18, 0xFA	; 250
    185a:	48 2f       	mov	r20, r24
    185c:	47 95       	ror	r20
    185e:	44 27       	eor	r20, r20
    1860:	47 95       	ror	r20
    1862:	24 1b       	sub	r18, r20
    1864:	27 ff       	sbrs	r18, 7
    1866:	10 c0       	rjmp	.+32     	; 0x1888 <SSD1306_UpdatePosition+0x44>
    // if more than allowable number of pages
    if (y > END_PAGE_ADDR) {
    1868:	88 30       	cpi	r24, 0x08	; 8
    186a:	60 f4       	brcc	.+24     	; 0x1884 <SSD1306_UpdatePosition+0x40>
      // return out of range
      return SSD1306_ERROR;
    // if x reach the end but page in range
    } else if (y < (END_PAGE_ADDR-1)) {
    186c:	86 30       	cpi	r24, 0x06	; 6
    186e:	60 f4       	brcc	.+24     	; 0x1888 <SSD1306_UpdatePosition+0x44>
      // update
      _counter = ((++y) << 7);
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	20 e8       	ldi	r18, 0x80	; 128
    1874:	82 9f       	mul	r24, r18
    1876:	c0 01       	movw	r24, r0
    1878:	11 24       	eor	r1, r1
    187a:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <_counter+0x1>
    187e:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <_counter>
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <SSD1306_UpdatePosition+0x44>
  // check position
  if (x_new > END_COLUMN_ADDR) {
    // if more than allowable number of pages
    if (y > END_PAGE_ADDR) {
      // return out of range
      return SSD1306_ERROR;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	08 95       	ret
      _counter = ((++y) << 7);
    }
  }
 
  // success
  return SSD1306_SUCCESS;
    1888:	80 e0       	ldi	r24, 0x00	; 0
}
    188a:	08 95       	ret

0000188c <SSD1306_DrawChar>:
 * @param   char character
 *
 * @return  uint8_t
 */
uint8_t SSD1306_DrawChar (char character)
{
    188c:	cf 93       	push	r28
    188e:	c8 2f       	mov	r28, r24
  // variables
  uint8_t i = 0;

  // update text position
  // this ensure that character will not be divided at the end of row, the whole character will be depicted on the new row
  if (SSD1306_UpdatePosition () == SSD1306_ERROR) {
    1890:	d9 df       	rcall	.-78     	; 0x1844 <SSD1306_UpdatePosition>
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	11 f1       	breq	.+68     	; 0x18da <SSD1306_DrawChar+0x4e>
    1896:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <_counter>
    189a:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <_counter+0x1>
    189e:	d9 01       	movw	r26, r18
    18a0:	a4 5a       	subi	r26, 0xA4	; 164
    18a2:	be 4f       	sbci	r27, 0xFE	; 254
    18a4:	45 e0       	ldi	r20, 0x05	; 5
    18a6:	c4 9f       	mul	r28, r20
    18a8:	c0 01       	movw	r24, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
  }

  // loop through 5 bits
  while (i < CHARS_COLS_LENGTH) {
    // read byte 
    cacheMemLcd[_counter++] = pgm_read_byte(&FONTS[character-32][i++]);
    18b0:	80 5a       	subi	r24, 0xA0	; 160
    18b2:	91 09       	sbc	r25, r1
    18b4:	fc 01       	movw	r30, r24
    18b6:	e4 0f       	add	r30, r20
    18b8:	f5 1f       	adc	r31, r21
    18ba:	e2 58       	subi	r30, 0x82	; 130
    18bc:	fc 4f       	sbci	r31, 0xFC	; 252
    18be:	e4 91       	lpm	r30, Z
    18c0:	ed 93       	st	X+, r30
    18c2:	4f 5f       	subi	r20, 0xFF	; 255
    18c4:	5f 4f       	sbci	r21, 0xFF	; 255
    // error
    return SSD1306_ERROR;
  }

  // loop through 5 bits
  while (i < CHARS_COLS_LENGTH) {
    18c6:	45 30       	cpi	r20, 0x05	; 5
    18c8:	51 05       	cpc	r21, r1
    18ca:	a1 f7       	brne	.-24     	; 0x18b4 <SSD1306_DrawChar+0x28>
    // read byte 
    cacheMemLcd[_counter++] = pgm_read_byte(&FONTS[character-32][i++]);
  }

  // update position
  _counter++;
    18cc:	2a 5f       	subi	r18, 0xFA	; 250
    18ce:	3f 4f       	sbci	r19, 0xFF	; 255
    18d0:	30 93 5d 05 	sts	0x055D, r19	; 0x80055d <_counter+0x1>
    18d4:	20 93 5c 05 	sts	0x055C, r18	; 0x80055c <_counter>

  // success
  return SSD1306_SUCCESS;
    18d8:	80 e0       	ldi	r24, 0x00	; 0
}
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <SSD1306_DrawString>:
 * @param   char * string
 *
 * @return  void
 */
void SSD1306_DrawString (char *str)
{
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	ec 01       	movw	r28, r24
  // init
  int i = 0;
  // loop through character of string
  while (str[i] != '\0') {
    18e4:	89 91       	ld	r24, Y+
    18e6:	88 23       	and	r24, r24
    18e8:	11 f0       	breq	.+4      	; 0x18ee <SSD1306_DrawString+0x10>
    // draw string
    SSD1306_DrawChar (str[i++]);
    18ea:	d0 df       	rcall	.-96     	; 0x188c <SSD1306_DrawChar>
    18ec:	fb cf       	rjmp	.-10     	; 0x18e4 <SSD1306_DrawString+0x6>
  }
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <SSD1306_DrawPixel>:
{
  uint8_t page = 0;
  uint8_t pixel = 0;

  // if out of range
  if ((x > MAX_X) || (y > MAX_Y)) {
    18f4:	87 fd       	sbrc	r24, 7
    18f6:	26 c0       	rjmp	.+76     	; 0x1944 <SSD1306_DrawPixel+0x50>
    18f8:	61 34       	cpi	r22, 0x41	; 65
    18fa:	20 f5       	brcc	.+72     	; 0x1944 <SSD1306_DrawPixel+0x50>
    return SSD1306_ERROR;
  }
  // find page (y / 8)
  page = y >> 3;
  // which pixel (y % 8)
  pixel = 1 << (y - (page << 3));
    18fc:	26 2f       	mov	r18, r22
    18fe:	26 95       	lsr	r18
    1900:	26 95       	lsr	r18
    1902:	26 95       	lsr	r18
    1904:	30 e0       	ldi	r19, 0x00	; 0
  // update counter
  _counter = x + (page << 7);
    1906:	f9 01       	movw	r30, r18
    1908:	f6 95       	lsr	r31
    190a:	fe 2f       	mov	r31, r30
    190c:	ee 27       	eor	r30, r30
    190e:	f7 95       	ror	r31
    1910:	e7 95       	ror	r30
    1912:	e8 0f       	add	r30, r24
    1914:	f1 1d       	adc	r31, r1
  // save pixel
  cacheMemLcd[_counter++] |= pixel;
    1916:	cf 01       	movw	r24, r30
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <_counter+0x1>
    191e:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <_counter>
    1922:	e4 5a       	subi	r30, 0xA4	; 164
    1924:	fe 4f       	sbci	r31, 0xFE	; 254
    1926:	88 e0       	ldi	r24, 0x08	; 8
    1928:	28 9f       	mul	r18, r24
    192a:	60 19       	sub	r22, r0
    192c:	11 24       	eor	r1, r1
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <SSD1306_DrawPixel+0x42>
    1934:	88 0f       	add	r24, r24
    1936:	6a 95       	dec	r22
    1938:	ea f7       	brpl	.-6      	; 0x1934 <SSD1306_DrawPixel+0x40>
    193a:	90 81       	ld	r25, Z
    193c:	89 2b       	or	r24, r25
    193e:	80 83       	st	Z, r24

  // success
  return SSD1306_SUCCESS;
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	08 95       	ret
  uint8_t pixel = 0;

  // if out of range
  if ((x > MAX_X) || (y > MAX_Y)) {
    // out of range
    return SSD1306_ERROR;
    1944:	81 e0       	ldi	r24, 0x01	; 1
  // save pixel
  cacheMemLcd[_counter++] |= pixel;

  // success
  return SSD1306_SUCCESS;
}
    1946:	08 95       	ret

00001948 <SSD1306_DrawLine>:
 * @param   uint8_t y end position   / 0 <= rows <= MAX_Y-1
 *
 * @return  uint8_t
 */
uint8_t SSD1306_DrawLine (uint8_t x1, uint8_t x2, uint8_t y1, uint8_t y2)
{
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	08 2f       	mov	r16, r24
    1962:	a6 2e       	mov	r10, r22
    1964:	14 2f       	mov	r17, r20
    1966:	b2 2e       	mov	r11, r18
  int16_t delta_x, delta_y;
  // steps
  int16_t trace_x = 1, trace_y = 1;

  // delta x
  delta_x = x2 - x1;
    1968:	26 2f       	mov	r18, r22
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	28 1b       	sub	r18, r24
    196e:	31 09       	sbc	r19, r1
  // delta y
  delta_y = y2 - y1;
    1970:	8b 2d       	mov	r24, r11
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	84 1b       	sub	r24, r20
    1976:	91 09       	sbc	r25, r1

  // check if x2 > x1
  if (delta_x < 0) {
    1978:	37 ff       	sbrs	r19, 7
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <SSD1306_DrawLine+0x40>
    // negate delta x
    delta_x = -delta_x;
    197c:	31 95       	neg	r19
    197e:	21 95       	neg	r18
    1980:	31 09       	sbc	r19, r1
    // negate step x
    trace_x = -trace_x;
    1982:	99 24       	eor	r9, r9
    1984:	9a 94       	dec	r9
    1986:	02 c0       	rjmp	.+4      	; 0x198c <SSD1306_DrawLine+0x44>
  // determinant
  int16_t D;
  // deltas
  int16_t delta_x, delta_y;
  // steps
  int16_t trace_x = 1, trace_y = 1;
    1988:	99 24       	eor	r9, r9
    198a:	93 94       	inc	r9
    // negate step x
    trace_x = -trace_x;
  }

  // check if y2 > y1
  if (delta_y < 0) {
    198c:	97 ff       	sbrs	r25, 7
    198e:	06 c0       	rjmp	.+12     	; 0x199c <SSD1306_DrawLine+0x54>
    // negate detla y
    delta_y = -delta_y;
    1990:	91 95       	neg	r25
    1992:	81 95       	neg	r24
    1994:	91 09       	sbc	r25, r1
    // negate step y
    trace_y = -trace_y;
    1996:	88 24       	eor	r8, r8
    1998:	8a 94       	dec	r8
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <SSD1306_DrawLine+0x58>
  // determinant
  int16_t D;
  // deltas
  int16_t delta_x, delta_y;
  // steps
  int16_t trace_x = 1, trace_y = 1;
    199c:	88 24       	eor	r8, r8
    199e:	83 94       	inc	r8
    19a0:	7c 01       	movw	r14, r24
    19a2:	ee 0c       	add	r14, r14
    19a4:	ff 1c       	adc	r15, r15
    19a6:	69 01       	movw	r12, r18
    19a8:	cc 0c       	add	r12, r12
    19aa:	dd 1c       	adc	r13, r13
    // negate step y
    trace_y = -trace_y;
  }

  // Bresenham condition for m < 1 (dy < dx)
  if (delta_y < delta_x) {
    19ac:	82 17       	cp	r24, r18
    19ae:	93 07       	cpc	r25, r19
    19b0:	8c f4       	brge	.+34     	; 0x19d4 <SSD1306_DrawLine+0x8c>
    // calculate determinant
    D = (delta_y << 1) - delta_x;
    19b2:	e7 01       	movw	r28, r14
    19b4:	c2 1b       	sub	r28, r18
    19b6:	d3 0b       	sbc	r29, r19
        D -= 2*delta_x;    
      }
      // update deteminant
      D += 2*delta_y;
      // draw next pixel
      SSD1306_DrawPixel (x1, y1);
    19b8:	61 2f       	mov	r22, r17
    19ba:	80 2f       	mov	r24, r16
    19bc:	9b df       	rcall	.-202    	; 0x18f4 <SSD1306_DrawPixel>
    // calculate determinant
    D = (delta_y << 1) - delta_x;
    // draw first pixel
    SSD1306_DrawPixel (x1, y1);
    // check if x1 equal x2
    while (x1 != x2) {
    19be:	0a 15       	cp	r16, r10
    19c0:	c9 f0       	breq	.+50     	; 0x19f4 <SSD1306_DrawLine+0xac>
    19c2:	09 0d       	add	r16, r9
      // update x1
      x1 += trace_x;
      // check if determinant is positive
      if (D >= 0) {
    19c4:	d7 fd       	sbrc	r29, 7
    19c6:	03 c0       	rjmp	.+6      	; 0x19ce <SSD1306_DrawLine+0x86>
        // update y1
        y1 += trace_y;
    19c8:	18 0d       	add	r17, r8
        // update determinant
        D -= 2*delta_x;    
    19ca:	cc 19       	sub	r28, r12
    19cc:	dd 09       	sbc	r29, r13
      }
      // update deteminant
      D += 2*delta_y;
    19ce:	ce 0d       	add	r28, r14
    19d0:	df 1d       	adc	r29, r15
    19d2:	f2 cf       	rjmp	.-28     	; 0x19b8 <SSD1306_DrawLine+0x70>
      SSD1306_DrawPixel (x1, y1);
    }
  // for m > 1 (dy > dx)    
  } else {
    // calculate determinant
    D = delta_y - (delta_x << 1);
    19d4:	ec 01       	movw	r28, r24
        x1 += trace_x;
        // update determinant
        D += 2*delta_y;    
      }
      // update deteminant
      D -= 2*delta_x;
    19d6:	cc 19       	sub	r28, r12
    19d8:	dd 09       	sbc	r29, r13
      // draw next pixel
      SSD1306_DrawPixel (x1, y1);
    19da:	61 2f       	mov	r22, r17
    19dc:	80 2f       	mov	r24, r16
    19de:	8a df       	rcall	.-236    	; 0x18f4 <SSD1306_DrawPixel>
    // calculate determinant
    D = delta_y - (delta_x << 1);
    // draw first pixel
    SSD1306_DrawPixel (x1, y1);
    // check if y2 equal y1
    while (y1 != y2) {
    19e0:	1b 15       	cp	r17, r11
    19e2:	41 f0       	breq	.+16     	; 0x19f4 <SSD1306_DrawLine+0xac>
    19e4:	18 0d       	add	r17, r8
      // update y1
      y1 += trace_y;
      // check if determinant is positive
      if (D <= 0) {
    19e6:	1c 16       	cp	r1, r28
    19e8:	1d 06       	cpc	r1, r29
    19ea:	ac f3       	brlt	.-22     	; 0x19d6 <SSD1306_DrawLine+0x8e>
        // update y1
        x1 += trace_x;
    19ec:	09 0d       	add	r16, r9
        // update determinant
        D += 2*delta_y;    
    19ee:	ce 0d       	add	r28, r14
    19f0:	df 1d       	adc	r29, r15
    19f2:	f1 cf       	rjmp	.-30     	; 0x19d6 <SSD1306_DrawLine+0x8e>
      SSD1306_DrawPixel (x1, y1);
    }
  }
  // success return
  return SSD1306_SUCCESS;
}
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	df 90       	pop	r13
    1a04:	cf 90       	pop	r12
    1a06:	bf 90       	pop	r11
    1a08:	af 90       	pop	r10
    1a0a:	9f 90       	pop	r9
    1a0c:	8f 90       	pop	r8
    1a0e:	08 95       	ret

00001a10 <TWI_Init>:
    // return status
    return TWI_STATUS;
  }
  // success
  return SUCCESS;
}
    1a10:	8c e0       	ldi	r24, 0x0C	; 12
    1a12:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1a16:	e9 eb       	ldi	r30, 0xB9	; 185
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	90 81       	ld	r25, Z
    1a1e:	83 70       	andi	r24, 0x03	; 3
    1a20:	89 2b       	or	r24, r25
    1a22:	80 83       	st	Z, r24
    1a24:	08 95       	ret

00001a26 <TWI_MT_Start>:
    1a26:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1a2a:	87 75       	andi	r24, 0x57	; 87
    1a2c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1a30:	84 ea       	ldi	r24, 0xA4	; 164
    1a32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1a36:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1a3a:	87 ff       	sbrs	r24, 7
    1a3c:	fc cf       	rjmp	.-8      	; 0x1a36 <TWI_MT_Start+0x10>
    1a3e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1a42:	88 7f       	andi	r24, 0xF8	; 248
    1a44:	88 30       	cpi	r24, 0x08	; 8
    1a46:	49 f0       	breq	.+18     	; 0x1a5a <TWI_MT_Start+0x34>
    1a48:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1a4c:	88 7f       	andi	r24, 0xF8	; 248
    1a4e:	80 31       	cpi	r24, 0x10	; 16
    1a50:	21 f0       	breq	.+8      	; 0x1a5a <TWI_MT_Start+0x34>
    1a52:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1a56:	88 7f       	andi	r24, 0xF8	; 248
    1a58:	08 95       	ret
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	08 95       	ret

00001a5e <TWI_MT_Send_SLAW>:
    1a5e:	88 0f       	add	r24, r24
    1a60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1a64:	84 e8       	ldi	r24, 0x84	; 132
    1a66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1a6a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1a6e:	87 ff       	sbrs	r24, 7
    1a70:	fc cf       	rjmp	.-8      	; 0x1a6a <TWI_MT_Send_SLAW+0xc>
    1a72:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1a76:	88 7f       	andi	r24, 0xF8	; 248
    1a78:	88 31       	cpi	r24, 0x18	; 24
    1a7a:	21 f0       	breq	.+8      	; 0x1a84 <TWI_MT_Send_SLAW+0x26>
    1a7c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1a80:	88 7f       	andi	r24, 0xF8	; 248
    1a82:	08 95       	ret
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	08 95       	ret

00001a88 <TWI_MT_Send_Data>:
    1a88:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1a8c:	84 e8       	ldi	r24, 0x84	; 132
    1a8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1a92:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1a96:	87 ff       	sbrs	r24, 7
    1a98:	fc cf       	rjmp	.-8      	; 0x1a92 <TWI_MT_Send_Data+0xa>
    1a9a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1a9e:	88 7f       	andi	r24, 0xF8	; 248
    1aa0:	88 32       	cpi	r24, 0x28	; 40
    1aa2:	21 f0       	breq	.+8      	; 0x1aac <TWI_MT_Send_Data+0x24>
    1aa4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1aa8:	88 7f       	andi	r24, 0xF8	; 248
    1aaa:	08 95       	ret
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	08 95       	ret

00001ab0 <TWI_Stop>:
void TWI_Stop (void)
{
  // End TWI
  // -------------------------------------------------------------------------------------
  // send stop sequence
  TWI_STOP ();
    1ab0:	84 e9       	ldi	r24, 0x94	; 148
    1ab2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1ab6:	08 95       	ret

00001ab8 <memcmp>:
    1ab8:	fb 01       	movw	r30, r22
    1aba:	dc 01       	movw	r26, r24
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <memcmp+0xe>
    1abe:	8d 91       	ld	r24, X+
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	80 19       	sub	r24, r0
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <memcmp+0x16>
    1ac6:	41 50       	subi	r20, 0x01	; 1
    1ac8:	50 40       	sbci	r21, 0x00	; 0
    1aca:	c8 f7       	brcc	.-14     	; 0x1abe <memcmp+0x6>
    1acc:	88 1b       	sub	r24, r24
    1ace:	99 0b       	sbc	r25, r25
    1ad0:	08 95       	ret

00001ad2 <memcpy>:
    1ad2:	fb 01       	movw	r30, r22
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <memcpy+0xa>
    1ad8:	01 90       	ld	r0, Z+
    1ada:	0d 92       	st	X+, r0
    1adc:	41 50       	subi	r20, 0x01	; 1
    1ade:	50 40       	sbci	r21, 0x00	; 0
    1ae0:	d8 f7       	brcc	.-10     	; 0x1ad8 <memcpy+0x6>
    1ae2:	08 95       	ret

00001ae4 <memset>:
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	01 c0       	rjmp	.+2      	; 0x1aea <memset+0x6>
    1ae8:	6d 93       	st	X+, r22
    1aea:	41 50       	subi	r20, 0x01	; 1
    1aec:	50 40       	sbci	r21, 0x00	; 0
    1aee:	e0 f7       	brcc	.-8      	; 0x1ae8 <memset+0x4>
    1af0:	08 95       	ret

00001af2 <sprintf>:
    1af2:	ae e0       	ldi	r26, 0x0E	; 14
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	ee e7       	ldi	r30, 0x7E	; 126
    1af8:	fd e0       	ldi	r31, 0x0D	; 13
    1afa:	aa c2       	rjmp	.+1364   	; 0x2050 <__prologue_saves__+0x1c>
    1afc:	0d 89       	ldd	r16, Y+21	; 0x15
    1afe:	1e 89       	ldd	r17, Y+22	; 0x16
    1b00:	86 e0       	ldi	r24, 0x06	; 6
    1b02:	8c 83       	std	Y+4, r24	; 0x04
    1b04:	1a 83       	std	Y+2, r17	; 0x02
    1b06:	09 83       	std	Y+1, r16	; 0x01
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	9f e7       	ldi	r25, 0x7F	; 127
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	ae 01       	movw	r20, r28
    1b12:	47 5e       	subi	r20, 0xE7	; 231
    1b14:	5f 4f       	sbci	r21, 0xFF	; 255
    1b16:	6f 89       	ldd	r22, Y+23	; 0x17
    1b18:	78 8d       	ldd	r23, Y+24	; 0x18
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	08 d0       	rcall	.+16     	; 0x1b30 <vfprintf>
    1b20:	ef 81       	ldd	r30, Y+7	; 0x07
    1b22:	f8 85       	ldd	r31, Y+8	; 0x08
    1b24:	e0 0f       	add	r30, r16
    1b26:	f1 1f       	adc	r31, r17
    1b28:	10 82       	st	Z, r1
    1b2a:	2e 96       	adiw	r28, 0x0e	; 14
    1b2c:	e4 e0       	ldi	r30, 0x04	; 4
    1b2e:	ac c2       	rjmp	.+1368   	; 0x2088 <__epilogue_restores__+0x1c>

00001b30 <vfprintf>:
    1b30:	ab e0       	ldi	r26, 0x0B	; 11
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ed e9       	ldi	r30, 0x9D	; 157
    1b36:	fd e0       	ldi	r31, 0x0D	; 13
    1b38:	7d c2       	rjmp	.+1274   	; 0x2034 <__prologue_saves__>
    1b3a:	6c 01       	movw	r12, r24
    1b3c:	7b 01       	movw	r14, r22
    1b3e:	8a 01       	movw	r16, r20
    1b40:	fc 01       	movw	r30, r24
    1b42:	17 82       	std	Z+7, r1	; 0x07
    1b44:	16 82       	std	Z+6, r1	; 0x06
    1b46:	83 81       	ldd	r24, Z+3	; 0x03
    1b48:	81 ff       	sbrs	r24, 1
    1b4a:	bf c1       	rjmp	.+894    	; 0x1eca <vfprintf+0x39a>
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	3c 01       	movw	r6, r24
    1b52:	f6 01       	movw	r30, r12
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	f7 01       	movw	r30, r14
    1b58:	93 fd       	sbrc	r25, 3
    1b5a:	85 91       	lpm	r24, Z+
    1b5c:	93 ff       	sbrs	r25, 3
    1b5e:	81 91       	ld	r24, Z+
    1b60:	7f 01       	movw	r14, r30
    1b62:	88 23       	and	r24, r24
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <vfprintf+0x38>
    1b66:	ad c1       	rjmp	.+858    	; 0x1ec2 <vfprintf+0x392>
    1b68:	85 32       	cpi	r24, 0x25	; 37
    1b6a:	39 f4       	brne	.+14     	; 0x1b7a <vfprintf+0x4a>
    1b6c:	93 fd       	sbrc	r25, 3
    1b6e:	85 91       	lpm	r24, Z+
    1b70:	93 ff       	sbrs	r25, 3
    1b72:	81 91       	ld	r24, Z+
    1b74:	7f 01       	movw	r14, r30
    1b76:	85 32       	cpi	r24, 0x25	; 37
    1b78:	21 f4       	brne	.+8      	; 0x1b82 <vfprintf+0x52>
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	c0 d1       	rcall	.+896    	; 0x1f00 <fputc>
    1b80:	e8 cf       	rjmp	.-48     	; 0x1b52 <vfprintf+0x22>
    1b82:	91 2c       	mov	r9, r1
    1b84:	21 2c       	mov	r2, r1
    1b86:	31 2c       	mov	r3, r1
    1b88:	ff e1       	ldi	r31, 0x1F	; 31
    1b8a:	f3 15       	cp	r31, r3
    1b8c:	d8 f0       	brcs	.+54     	; 0x1bc4 <vfprintf+0x94>
    1b8e:	8b 32       	cpi	r24, 0x2B	; 43
    1b90:	79 f0       	breq	.+30     	; 0x1bb0 <vfprintf+0x80>
    1b92:	38 f4       	brcc	.+14     	; 0x1ba2 <vfprintf+0x72>
    1b94:	80 32       	cpi	r24, 0x20	; 32
    1b96:	79 f0       	breq	.+30     	; 0x1bb6 <vfprintf+0x86>
    1b98:	83 32       	cpi	r24, 0x23	; 35
    1b9a:	a1 f4       	brne	.+40     	; 0x1bc4 <vfprintf+0x94>
    1b9c:	23 2d       	mov	r18, r3
    1b9e:	20 61       	ori	r18, 0x10	; 16
    1ba0:	1d c0       	rjmp	.+58     	; 0x1bdc <vfprintf+0xac>
    1ba2:	8d 32       	cpi	r24, 0x2D	; 45
    1ba4:	61 f0       	breq	.+24     	; 0x1bbe <vfprintf+0x8e>
    1ba6:	80 33       	cpi	r24, 0x30	; 48
    1ba8:	69 f4       	brne	.+26     	; 0x1bc4 <vfprintf+0x94>
    1baa:	23 2d       	mov	r18, r3
    1bac:	21 60       	ori	r18, 0x01	; 1
    1bae:	16 c0       	rjmp	.+44     	; 0x1bdc <vfprintf+0xac>
    1bb0:	83 2d       	mov	r24, r3
    1bb2:	82 60       	ori	r24, 0x02	; 2
    1bb4:	38 2e       	mov	r3, r24
    1bb6:	e3 2d       	mov	r30, r3
    1bb8:	e4 60       	ori	r30, 0x04	; 4
    1bba:	3e 2e       	mov	r3, r30
    1bbc:	2a c0       	rjmp	.+84     	; 0x1c12 <vfprintf+0xe2>
    1bbe:	f3 2d       	mov	r31, r3
    1bc0:	f8 60       	ori	r31, 0x08	; 8
    1bc2:	1d c0       	rjmp	.+58     	; 0x1bfe <vfprintf+0xce>
    1bc4:	37 fc       	sbrc	r3, 7
    1bc6:	2d c0       	rjmp	.+90     	; 0x1c22 <vfprintf+0xf2>
    1bc8:	20 ed       	ldi	r18, 0xD0	; 208
    1bca:	28 0f       	add	r18, r24
    1bcc:	2a 30       	cpi	r18, 0x0A	; 10
    1bce:	40 f0       	brcs	.+16     	; 0x1be0 <vfprintf+0xb0>
    1bd0:	8e 32       	cpi	r24, 0x2E	; 46
    1bd2:	b9 f4       	brne	.+46     	; 0x1c02 <vfprintf+0xd2>
    1bd4:	36 fc       	sbrc	r3, 6
    1bd6:	75 c1       	rjmp	.+746    	; 0x1ec2 <vfprintf+0x392>
    1bd8:	23 2d       	mov	r18, r3
    1bda:	20 64       	ori	r18, 0x40	; 64
    1bdc:	32 2e       	mov	r3, r18
    1bde:	19 c0       	rjmp	.+50     	; 0x1c12 <vfprintf+0xe2>
    1be0:	36 fe       	sbrs	r3, 6
    1be2:	06 c0       	rjmp	.+12     	; 0x1bf0 <vfprintf+0xc0>
    1be4:	8a e0       	ldi	r24, 0x0A	; 10
    1be6:	98 9e       	mul	r9, r24
    1be8:	20 0d       	add	r18, r0
    1bea:	11 24       	eor	r1, r1
    1bec:	92 2e       	mov	r9, r18
    1bee:	11 c0       	rjmp	.+34     	; 0x1c12 <vfprintf+0xe2>
    1bf0:	ea e0       	ldi	r30, 0x0A	; 10
    1bf2:	2e 9e       	mul	r2, r30
    1bf4:	20 0d       	add	r18, r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	22 2e       	mov	r2, r18
    1bfa:	f3 2d       	mov	r31, r3
    1bfc:	f0 62       	ori	r31, 0x20	; 32
    1bfe:	3f 2e       	mov	r3, r31
    1c00:	08 c0       	rjmp	.+16     	; 0x1c12 <vfprintf+0xe2>
    1c02:	8c 36       	cpi	r24, 0x6C	; 108
    1c04:	21 f4       	brne	.+8      	; 0x1c0e <vfprintf+0xde>
    1c06:	83 2d       	mov	r24, r3
    1c08:	80 68       	ori	r24, 0x80	; 128
    1c0a:	38 2e       	mov	r3, r24
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <vfprintf+0xe2>
    1c0e:	88 36       	cpi	r24, 0x68	; 104
    1c10:	41 f4       	brne	.+16     	; 0x1c22 <vfprintf+0xf2>
    1c12:	f7 01       	movw	r30, r14
    1c14:	93 fd       	sbrc	r25, 3
    1c16:	85 91       	lpm	r24, Z+
    1c18:	93 ff       	sbrs	r25, 3
    1c1a:	81 91       	ld	r24, Z+
    1c1c:	7f 01       	movw	r14, r30
    1c1e:	81 11       	cpse	r24, r1
    1c20:	b3 cf       	rjmp	.-154    	; 0x1b88 <vfprintf+0x58>
    1c22:	98 2f       	mov	r25, r24
    1c24:	9f 7d       	andi	r25, 0xDF	; 223
    1c26:	95 54       	subi	r25, 0x45	; 69
    1c28:	93 30       	cpi	r25, 0x03	; 3
    1c2a:	28 f4       	brcc	.+10     	; 0x1c36 <vfprintf+0x106>
    1c2c:	0c 5f       	subi	r16, 0xFC	; 252
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	9f e3       	ldi	r25, 0x3F	; 63
    1c32:	99 83       	std	Y+1, r25	; 0x01
    1c34:	0d c0       	rjmp	.+26     	; 0x1c50 <vfprintf+0x120>
    1c36:	83 36       	cpi	r24, 0x63	; 99
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <vfprintf+0x116>
    1c3a:	83 37       	cpi	r24, 0x73	; 115
    1c3c:	71 f0       	breq	.+28     	; 0x1c5a <vfprintf+0x12a>
    1c3e:	83 35       	cpi	r24, 0x53	; 83
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <vfprintf+0x114>
    1c42:	55 c0       	rjmp	.+170    	; 0x1cee <vfprintf+0x1be>
    1c44:	20 c0       	rjmp	.+64     	; 0x1c86 <vfprintf+0x156>
    1c46:	f8 01       	movw	r30, r16
    1c48:	80 81       	ld	r24, Z
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	0e 5f       	subi	r16, 0xFE	; 254
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	88 24       	eor	r8, r8
    1c52:	83 94       	inc	r8
    1c54:	91 2c       	mov	r9, r1
    1c56:	53 01       	movw	r10, r6
    1c58:	12 c0       	rjmp	.+36     	; 0x1c7e <vfprintf+0x14e>
    1c5a:	28 01       	movw	r4, r16
    1c5c:	f2 e0       	ldi	r31, 0x02	; 2
    1c5e:	4f 0e       	add	r4, r31
    1c60:	51 1c       	adc	r5, r1
    1c62:	f8 01       	movw	r30, r16
    1c64:	a0 80       	ld	r10, Z
    1c66:	b1 80       	ldd	r11, Z+1	; 0x01
    1c68:	36 fe       	sbrs	r3, 6
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <vfprintf+0x142>
    1c6c:	69 2d       	mov	r22, r9
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <vfprintf+0x146>
    1c72:	6f ef       	ldi	r22, 0xFF	; 255
    1c74:	7f ef       	ldi	r23, 0xFF	; 255
    1c76:	c5 01       	movw	r24, r10
    1c78:	38 d1       	rcall	.+624    	; 0x1eea <strnlen>
    1c7a:	4c 01       	movw	r8, r24
    1c7c:	82 01       	movw	r16, r4
    1c7e:	f3 2d       	mov	r31, r3
    1c80:	ff 77       	andi	r31, 0x7F	; 127
    1c82:	3f 2e       	mov	r3, r31
    1c84:	15 c0       	rjmp	.+42     	; 0x1cb0 <vfprintf+0x180>
    1c86:	28 01       	movw	r4, r16
    1c88:	22 e0       	ldi	r18, 0x02	; 2
    1c8a:	42 0e       	add	r4, r18
    1c8c:	51 1c       	adc	r5, r1
    1c8e:	f8 01       	movw	r30, r16
    1c90:	a0 80       	ld	r10, Z
    1c92:	b1 80       	ldd	r11, Z+1	; 0x01
    1c94:	36 fe       	sbrs	r3, 6
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <vfprintf+0x16e>
    1c98:	69 2d       	mov	r22, r9
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <vfprintf+0x172>
    1c9e:	6f ef       	ldi	r22, 0xFF	; 255
    1ca0:	7f ef       	ldi	r23, 0xFF	; 255
    1ca2:	c5 01       	movw	r24, r10
    1ca4:	17 d1       	rcall	.+558    	; 0x1ed4 <strnlen_P>
    1ca6:	4c 01       	movw	r8, r24
    1ca8:	f3 2d       	mov	r31, r3
    1caa:	f0 68       	ori	r31, 0x80	; 128
    1cac:	3f 2e       	mov	r3, r31
    1cae:	82 01       	movw	r16, r4
    1cb0:	33 fc       	sbrc	r3, 3
    1cb2:	19 c0       	rjmp	.+50     	; 0x1ce6 <vfprintf+0x1b6>
    1cb4:	82 2d       	mov	r24, r2
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	88 16       	cp	r8, r24
    1cba:	99 06       	cpc	r9, r25
    1cbc:	a0 f4       	brcc	.+40     	; 0x1ce6 <vfprintf+0x1b6>
    1cbe:	b6 01       	movw	r22, r12
    1cc0:	80 e2       	ldi	r24, 0x20	; 32
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	1d d1       	rcall	.+570    	; 0x1f00 <fputc>
    1cc6:	2a 94       	dec	r2
    1cc8:	f5 cf       	rjmp	.-22     	; 0x1cb4 <vfprintf+0x184>
    1cca:	f5 01       	movw	r30, r10
    1ccc:	37 fc       	sbrc	r3, 7
    1cce:	85 91       	lpm	r24, Z+
    1cd0:	37 fe       	sbrs	r3, 7
    1cd2:	81 91       	ld	r24, Z+
    1cd4:	5f 01       	movw	r10, r30
    1cd6:	b6 01       	movw	r22, r12
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	12 d1       	rcall	.+548    	; 0x1f00 <fputc>
    1cdc:	21 10       	cpse	r2, r1
    1cde:	2a 94       	dec	r2
    1ce0:	21 e0       	ldi	r18, 0x01	; 1
    1ce2:	82 1a       	sub	r8, r18
    1ce4:	91 08       	sbc	r9, r1
    1ce6:	81 14       	cp	r8, r1
    1ce8:	91 04       	cpc	r9, r1
    1cea:	79 f7       	brne	.-34     	; 0x1cca <vfprintf+0x19a>
    1cec:	e1 c0       	rjmp	.+450    	; 0x1eb0 <vfprintf+0x380>
    1cee:	84 36       	cpi	r24, 0x64	; 100
    1cf0:	11 f0       	breq	.+4      	; 0x1cf6 <vfprintf+0x1c6>
    1cf2:	89 36       	cpi	r24, 0x69	; 105
    1cf4:	39 f5       	brne	.+78     	; 0x1d44 <vfprintf+0x214>
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	37 fe       	sbrs	r3, 7
    1cfa:	07 c0       	rjmp	.+14     	; 0x1d0a <vfprintf+0x1da>
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	0c 5f       	subi	r16, 0xFC	; 252
    1d06:	1f 4f       	sbci	r17, 0xFF	; 255
    1d08:	08 c0       	rjmp	.+16     	; 0x1d1a <vfprintf+0x1ea>
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	07 2e       	mov	r0, r23
    1d10:	00 0c       	add	r0, r0
    1d12:	88 0b       	sbc	r24, r24
    1d14:	99 0b       	sbc	r25, r25
    1d16:	0e 5f       	subi	r16, 0xFE	; 254
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	f3 2d       	mov	r31, r3
    1d1c:	ff 76       	andi	r31, 0x6F	; 111
    1d1e:	3f 2e       	mov	r3, r31
    1d20:	97 ff       	sbrs	r25, 7
    1d22:	09 c0       	rjmp	.+18     	; 0x1d36 <vfprintf+0x206>
    1d24:	90 95       	com	r25
    1d26:	80 95       	com	r24
    1d28:	70 95       	com	r23
    1d2a:	61 95       	neg	r22
    1d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d30:	9f 4f       	sbci	r25, 0xFF	; 255
    1d32:	f0 68       	ori	r31, 0x80	; 128
    1d34:	3f 2e       	mov	r3, r31
    1d36:	2a e0       	ldi	r18, 0x0A	; 10
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	a3 01       	movw	r20, r6
    1d3c:	1d d1       	rcall	.+570    	; 0x1f78 <__ultoa_invert>
    1d3e:	88 2e       	mov	r8, r24
    1d40:	86 18       	sub	r8, r6
    1d42:	44 c0       	rjmp	.+136    	; 0x1dcc <vfprintf+0x29c>
    1d44:	85 37       	cpi	r24, 0x75	; 117
    1d46:	31 f4       	brne	.+12     	; 0x1d54 <vfprintf+0x224>
    1d48:	23 2d       	mov	r18, r3
    1d4a:	2f 7e       	andi	r18, 0xEF	; 239
    1d4c:	b2 2e       	mov	r11, r18
    1d4e:	2a e0       	ldi	r18, 0x0A	; 10
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	25 c0       	rjmp	.+74     	; 0x1d9e <vfprintf+0x26e>
    1d54:	93 2d       	mov	r25, r3
    1d56:	99 7f       	andi	r25, 0xF9	; 249
    1d58:	b9 2e       	mov	r11, r25
    1d5a:	8f 36       	cpi	r24, 0x6F	; 111
    1d5c:	c1 f0       	breq	.+48     	; 0x1d8e <vfprintf+0x25e>
    1d5e:	18 f4       	brcc	.+6      	; 0x1d66 <vfprintf+0x236>
    1d60:	88 35       	cpi	r24, 0x58	; 88
    1d62:	79 f0       	breq	.+30     	; 0x1d82 <vfprintf+0x252>
    1d64:	ae c0       	rjmp	.+348    	; 0x1ec2 <vfprintf+0x392>
    1d66:	80 37       	cpi	r24, 0x70	; 112
    1d68:	19 f0       	breq	.+6      	; 0x1d70 <vfprintf+0x240>
    1d6a:	88 37       	cpi	r24, 0x78	; 120
    1d6c:	21 f0       	breq	.+8      	; 0x1d76 <vfprintf+0x246>
    1d6e:	a9 c0       	rjmp	.+338    	; 0x1ec2 <vfprintf+0x392>
    1d70:	e9 2f       	mov	r30, r25
    1d72:	e0 61       	ori	r30, 0x10	; 16
    1d74:	be 2e       	mov	r11, r30
    1d76:	b4 fe       	sbrs	r11, 4
    1d78:	0d c0       	rjmp	.+26     	; 0x1d94 <vfprintf+0x264>
    1d7a:	fb 2d       	mov	r31, r11
    1d7c:	f4 60       	ori	r31, 0x04	; 4
    1d7e:	bf 2e       	mov	r11, r31
    1d80:	09 c0       	rjmp	.+18     	; 0x1d94 <vfprintf+0x264>
    1d82:	34 fe       	sbrs	r3, 4
    1d84:	0a c0       	rjmp	.+20     	; 0x1d9a <vfprintf+0x26a>
    1d86:	29 2f       	mov	r18, r25
    1d88:	26 60       	ori	r18, 0x06	; 6
    1d8a:	b2 2e       	mov	r11, r18
    1d8c:	06 c0       	rjmp	.+12     	; 0x1d9a <vfprintf+0x26a>
    1d8e:	28 e0       	ldi	r18, 0x08	; 8
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	05 c0       	rjmp	.+10     	; 0x1d9e <vfprintf+0x26e>
    1d94:	20 e1       	ldi	r18, 0x10	; 16
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <vfprintf+0x26e>
    1d9a:	20 e1       	ldi	r18, 0x10	; 16
    1d9c:	32 e0       	ldi	r19, 0x02	; 2
    1d9e:	f8 01       	movw	r30, r16
    1da0:	b7 fe       	sbrs	r11, 7
    1da2:	07 c0       	rjmp	.+14     	; 0x1db2 <vfprintf+0x282>
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	0c 5f       	subi	r16, 0xFC	; 252
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	06 c0       	rjmp	.+12     	; 0x1dbe <vfprintf+0x28e>
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 5f       	subi	r16, 0xFE	; 254
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	a3 01       	movw	r20, r6
    1dc0:	db d0       	rcall	.+438    	; 0x1f78 <__ultoa_invert>
    1dc2:	88 2e       	mov	r8, r24
    1dc4:	86 18       	sub	r8, r6
    1dc6:	fb 2d       	mov	r31, r11
    1dc8:	ff 77       	andi	r31, 0x7F	; 127
    1dca:	3f 2e       	mov	r3, r31
    1dcc:	36 fe       	sbrs	r3, 6
    1dce:	0d c0       	rjmp	.+26     	; 0x1dea <vfprintf+0x2ba>
    1dd0:	23 2d       	mov	r18, r3
    1dd2:	2e 7f       	andi	r18, 0xFE	; 254
    1dd4:	a2 2e       	mov	r10, r18
    1dd6:	89 14       	cp	r8, r9
    1dd8:	58 f4       	brcc	.+22     	; 0x1df0 <vfprintf+0x2c0>
    1dda:	34 fe       	sbrs	r3, 4
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <vfprintf+0x2c4>
    1dde:	32 fc       	sbrc	r3, 2
    1de0:	09 c0       	rjmp	.+18     	; 0x1df4 <vfprintf+0x2c4>
    1de2:	83 2d       	mov	r24, r3
    1de4:	8e 7e       	andi	r24, 0xEE	; 238
    1de6:	a8 2e       	mov	r10, r24
    1de8:	05 c0       	rjmp	.+10     	; 0x1df4 <vfprintf+0x2c4>
    1dea:	b8 2c       	mov	r11, r8
    1dec:	a3 2c       	mov	r10, r3
    1dee:	03 c0       	rjmp	.+6      	; 0x1df6 <vfprintf+0x2c6>
    1df0:	b8 2c       	mov	r11, r8
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <vfprintf+0x2c6>
    1df4:	b9 2c       	mov	r11, r9
    1df6:	a4 fe       	sbrs	r10, 4
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <vfprintf+0x2e8>
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e8 0d       	add	r30, r8
    1dfe:	f1 1d       	adc	r31, r1
    1e00:	80 81       	ld	r24, Z
    1e02:	80 33       	cpi	r24, 0x30	; 48
    1e04:	21 f4       	brne	.+8      	; 0x1e0e <vfprintf+0x2de>
    1e06:	9a 2d       	mov	r25, r10
    1e08:	99 7e       	andi	r25, 0xE9	; 233
    1e0a:	a9 2e       	mov	r10, r25
    1e0c:	09 c0       	rjmp	.+18     	; 0x1e20 <vfprintf+0x2f0>
    1e0e:	a2 fe       	sbrs	r10, 2
    1e10:	06 c0       	rjmp	.+12     	; 0x1e1e <vfprintf+0x2ee>
    1e12:	b3 94       	inc	r11
    1e14:	b3 94       	inc	r11
    1e16:	04 c0       	rjmp	.+8      	; 0x1e20 <vfprintf+0x2f0>
    1e18:	8a 2d       	mov	r24, r10
    1e1a:	86 78       	andi	r24, 0x86	; 134
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <vfprintf+0x2f0>
    1e1e:	b3 94       	inc	r11
    1e20:	a3 fc       	sbrc	r10, 3
    1e22:	10 c0       	rjmp	.+32     	; 0x1e44 <vfprintf+0x314>
    1e24:	a0 fe       	sbrs	r10, 0
    1e26:	06 c0       	rjmp	.+12     	; 0x1e34 <vfprintf+0x304>
    1e28:	b2 14       	cp	r11, r2
    1e2a:	80 f4       	brcc	.+32     	; 0x1e4c <vfprintf+0x31c>
    1e2c:	28 0c       	add	r2, r8
    1e2e:	92 2c       	mov	r9, r2
    1e30:	9b 18       	sub	r9, r11
    1e32:	0d c0       	rjmp	.+26     	; 0x1e4e <vfprintf+0x31e>
    1e34:	b2 14       	cp	r11, r2
    1e36:	58 f4       	brcc	.+22     	; 0x1e4e <vfprintf+0x31e>
    1e38:	b6 01       	movw	r22, r12
    1e3a:	80 e2       	ldi	r24, 0x20	; 32
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	60 d0       	rcall	.+192    	; 0x1f00 <fputc>
    1e40:	b3 94       	inc	r11
    1e42:	f8 cf       	rjmp	.-16     	; 0x1e34 <vfprintf+0x304>
    1e44:	b2 14       	cp	r11, r2
    1e46:	18 f4       	brcc	.+6      	; 0x1e4e <vfprintf+0x31e>
    1e48:	2b 18       	sub	r2, r11
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <vfprintf+0x320>
    1e4c:	98 2c       	mov	r9, r8
    1e4e:	21 2c       	mov	r2, r1
    1e50:	a4 fe       	sbrs	r10, 4
    1e52:	0f c0       	rjmp	.+30     	; 0x1e72 <vfprintf+0x342>
    1e54:	b6 01       	movw	r22, r12
    1e56:	80 e3       	ldi	r24, 0x30	; 48
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	52 d0       	rcall	.+164    	; 0x1f00 <fputc>
    1e5c:	a2 fe       	sbrs	r10, 2
    1e5e:	16 c0       	rjmp	.+44     	; 0x1e8c <vfprintf+0x35c>
    1e60:	a1 fc       	sbrc	r10, 1
    1e62:	03 c0       	rjmp	.+6      	; 0x1e6a <vfprintf+0x33a>
    1e64:	88 e7       	ldi	r24, 0x78	; 120
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <vfprintf+0x33e>
    1e6a:	88 e5       	ldi	r24, 0x58	; 88
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	b6 01       	movw	r22, r12
    1e70:	0c c0       	rjmp	.+24     	; 0x1e8a <vfprintf+0x35a>
    1e72:	8a 2d       	mov	r24, r10
    1e74:	86 78       	andi	r24, 0x86	; 134
    1e76:	51 f0       	breq	.+20     	; 0x1e8c <vfprintf+0x35c>
    1e78:	a1 fe       	sbrs	r10, 1
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <vfprintf+0x350>
    1e7c:	8b e2       	ldi	r24, 0x2B	; 43
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <vfprintf+0x352>
    1e80:	80 e2       	ldi	r24, 0x20	; 32
    1e82:	a7 fc       	sbrc	r10, 7
    1e84:	8d e2       	ldi	r24, 0x2D	; 45
    1e86:	b6 01       	movw	r22, r12
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	3a d0       	rcall	.+116    	; 0x1f00 <fputc>
    1e8c:	89 14       	cp	r8, r9
    1e8e:	30 f4       	brcc	.+12     	; 0x1e9c <vfprintf+0x36c>
    1e90:	b6 01       	movw	r22, r12
    1e92:	80 e3       	ldi	r24, 0x30	; 48
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	34 d0       	rcall	.+104    	; 0x1f00 <fputc>
    1e98:	9a 94       	dec	r9
    1e9a:	f8 cf       	rjmp	.-16     	; 0x1e8c <vfprintf+0x35c>
    1e9c:	8a 94       	dec	r8
    1e9e:	f3 01       	movw	r30, r6
    1ea0:	e8 0d       	add	r30, r8
    1ea2:	f1 1d       	adc	r31, r1
    1ea4:	80 81       	ld	r24, Z
    1ea6:	b6 01       	movw	r22, r12
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	2a d0       	rcall	.+84     	; 0x1f00 <fputc>
    1eac:	81 10       	cpse	r8, r1
    1eae:	f6 cf       	rjmp	.-20     	; 0x1e9c <vfprintf+0x36c>
    1eb0:	22 20       	and	r2, r2
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <vfprintf+0x386>
    1eb4:	4e ce       	rjmp	.-868    	; 0x1b52 <vfprintf+0x22>
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	80 e2       	ldi	r24, 0x20	; 32
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	21 d0       	rcall	.+66     	; 0x1f00 <fputc>
    1ebe:	2a 94       	dec	r2
    1ec0:	f7 cf       	rjmp	.-18     	; 0x1eb0 <vfprintf+0x380>
    1ec2:	f6 01       	movw	r30, r12
    1ec4:	86 81       	ldd	r24, Z+6	; 0x06
    1ec6:	97 81       	ldd	r25, Z+7	; 0x07
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <vfprintf+0x39e>
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	9f ef       	ldi	r25, 0xFF	; 255
    1ece:	2b 96       	adiw	r28, 0x0b	; 11
    1ed0:	e2 e1       	ldi	r30, 0x12	; 18
    1ed2:	cc c0       	rjmp	.+408    	; 0x206c <__epilogue_restores__>

00001ed4 <strnlen_P>:
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	05 90       	lpm	r0, Z+
    1ed8:	61 50       	subi	r22, 0x01	; 1
    1eda:	70 40       	sbci	r23, 0x00	; 0
    1edc:	01 10       	cpse	r0, r1
    1ede:	d8 f7       	brcc	.-10     	; 0x1ed6 <strnlen_P+0x2>
    1ee0:	80 95       	com	r24
    1ee2:	90 95       	com	r25
    1ee4:	8e 0f       	add	r24, r30
    1ee6:	9f 1f       	adc	r25, r31
    1ee8:	08 95       	ret

00001eea <strnlen>:
    1eea:	fc 01       	movw	r30, r24
    1eec:	61 50       	subi	r22, 0x01	; 1
    1eee:	70 40       	sbci	r23, 0x00	; 0
    1ef0:	01 90       	ld	r0, Z+
    1ef2:	01 10       	cpse	r0, r1
    1ef4:	d8 f7       	brcc	.-10     	; 0x1eec <strnlen+0x2>
    1ef6:	80 95       	com	r24
    1ef8:	90 95       	com	r25
    1efa:	8e 0f       	add	r24, r30
    1efc:	9f 1f       	adc	r25, r31
    1efe:	08 95       	ret

00001f00 <fputc>:
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	fb 01       	movw	r30, r22
    1f0a:	23 81       	ldd	r18, Z+3	; 0x03
    1f0c:	21 fd       	sbrc	r18, 1
    1f0e:	03 c0       	rjmp	.+6      	; 0x1f16 <fputc+0x16>
    1f10:	8f ef       	ldi	r24, 0xFF	; 255
    1f12:	9f ef       	ldi	r25, 0xFF	; 255
    1f14:	2c c0       	rjmp	.+88     	; 0x1f6e <fputc+0x6e>
    1f16:	22 ff       	sbrs	r18, 2
    1f18:	16 c0       	rjmp	.+44     	; 0x1f46 <fputc+0x46>
    1f1a:	46 81       	ldd	r20, Z+6	; 0x06
    1f1c:	57 81       	ldd	r21, Z+7	; 0x07
    1f1e:	24 81       	ldd	r18, Z+4	; 0x04
    1f20:	35 81       	ldd	r19, Z+5	; 0x05
    1f22:	42 17       	cp	r20, r18
    1f24:	53 07       	cpc	r21, r19
    1f26:	44 f4       	brge	.+16     	; 0x1f38 <fputc+0x38>
    1f28:	a0 81       	ld	r26, Z
    1f2a:	b1 81       	ldd	r27, Z+1	; 0x01
    1f2c:	9d 01       	movw	r18, r26
    1f2e:	2f 5f       	subi	r18, 0xFF	; 255
    1f30:	3f 4f       	sbci	r19, 0xFF	; 255
    1f32:	31 83       	std	Z+1, r19	; 0x01
    1f34:	20 83       	st	Z, r18
    1f36:	8c 93       	st	X, r24
    1f38:	26 81       	ldd	r18, Z+6	; 0x06
    1f3a:	37 81       	ldd	r19, Z+7	; 0x07
    1f3c:	2f 5f       	subi	r18, 0xFF	; 255
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	37 83       	std	Z+7, r19	; 0x07
    1f42:	26 83       	std	Z+6, r18	; 0x06
    1f44:	14 c0       	rjmp	.+40     	; 0x1f6e <fputc+0x6e>
    1f46:	8b 01       	movw	r16, r22
    1f48:	ec 01       	movw	r28, r24
    1f4a:	fb 01       	movw	r30, r22
    1f4c:	00 84       	ldd	r0, Z+8	; 0x08
    1f4e:	f1 85       	ldd	r31, Z+9	; 0x09
    1f50:	e0 2d       	mov	r30, r0
    1f52:	09 95       	icall
    1f54:	89 2b       	or	r24, r25
    1f56:	e1 f6       	brne	.-72     	; 0x1f10 <fputc+0x10>
    1f58:	d8 01       	movw	r26, r16
    1f5a:	16 96       	adiw	r26, 0x06	; 6
    1f5c:	8d 91       	ld	r24, X+
    1f5e:	9c 91       	ld	r25, X
    1f60:	17 97       	sbiw	r26, 0x07	; 7
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	17 96       	adiw	r26, 0x07	; 7
    1f66:	9c 93       	st	X, r25
    1f68:	8e 93       	st	-X, r24
    1f6a:	16 97       	sbiw	r26, 0x06	; 6
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	08 95       	ret

00001f78 <__ultoa_invert>:
    1f78:	fa 01       	movw	r30, r20
    1f7a:	aa 27       	eor	r26, r26
    1f7c:	28 30       	cpi	r18, 0x08	; 8
    1f7e:	51 f1       	breq	.+84     	; 0x1fd4 <__ultoa_invert+0x5c>
    1f80:	20 31       	cpi	r18, 0x10	; 16
    1f82:	81 f1       	breq	.+96     	; 0x1fe4 <__ultoa_invert+0x6c>
    1f84:	e8 94       	clt
    1f86:	6f 93       	push	r22
    1f88:	6e 7f       	andi	r22, 0xFE	; 254
    1f8a:	6e 5f       	subi	r22, 0xFE	; 254
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f90:	9f 4f       	sbci	r25, 0xFF	; 255
    1f92:	af 4f       	sbci	r26, 0xFF	; 255
    1f94:	b1 e0       	ldi	r27, 0x01	; 1
    1f96:	3e d0       	rcall	.+124    	; 0x2014 <__ultoa_invert+0x9c>
    1f98:	b4 e0       	ldi	r27, 0x04	; 4
    1f9a:	3c d0       	rcall	.+120    	; 0x2014 <__ultoa_invert+0x9c>
    1f9c:	67 0f       	add	r22, r23
    1f9e:	78 1f       	adc	r23, r24
    1fa0:	89 1f       	adc	r24, r25
    1fa2:	9a 1f       	adc	r25, r26
    1fa4:	a1 1d       	adc	r26, r1
    1fa6:	68 0f       	add	r22, r24
    1fa8:	79 1f       	adc	r23, r25
    1faa:	8a 1f       	adc	r24, r26
    1fac:	91 1d       	adc	r25, r1
    1fae:	a1 1d       	adc	r26, r1
    1fb0:	6a 0f       	add	r22, r26
    1fb2:	71 1d       	adc	r23, r1
    1fb4:	81 1d       	adc	r24, r1
    1fb6:	91 1d       	adc	r25, r1
    1fb8:	a1 1d       	adc	r26, r1
    1fba:	20 d0       	rcall	.+64     	; 0x1ffc <__ultoa_invert+0x84>
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <__ultoa_invert+0x48>
    1fbe:	68 94       	set
    1fc0:	3f 91       	pop	r19
    1fc2:	2a e0       	ldi	r18, 0x0A	; 10
    1fc4:	26 9f       	mul	r18, r22
    1fc6:	11 24       	eor	r1, r1
    1fc8:	30 19       	sub	r19, r0
    1fca:	30 5d       	subi	r19, 0xD0	; 208
    1fcc:	31 93       	st	Z+, r19
    1fce:	de f6       	brtc	.-74     	; 0x1f86 <__ultoa_invert+0xe>
    1fd0:	cf 01       	movw	r24, r30
    1fd2:	08 95       	ret
    1fd4:	46 2f       	mov	r20, r22
    1fd6:	47 70       	andi	r20, 0x07	; 7
    1fd8:	40 5d       	subi	r20, 0xD0	; 208
    1fda:	41 93       	st	Z+, r20
    1fdc:	b3 e0       	ldi	r27, 0x03	; 3
    1fde:	0f d0       	rcall	.+30     	; 0x1ffe <__ultoa_invert+0x86>
    1fe0:	c9 f7       	brne	.-14     	; 0x1fd4 <__ultoa_invert+0x5c>
    1fe2:	f6 cf       	rjmp	.-20     	; 0x1fd0 <__ultoa_invert+0x58>
    1fe4:	46 2f       	mov	r20, r22
    1fe6:	4f 70       	andi	r20, 0x0F	; 15
    1fe8:	40 5d       	subi	r20, 0xD0	; 208
    1fea:	4a 33       	cpi	r20, 0x3A	; 58
    1fec:	18 f0       	brcs	.+6      	; 0x1ff4 <__ultoa_invert+0x7c>
    1fee:	49 5d       	subi	r20, 0xD9	; 217
    1ff0:	31 fd       	sbrc	r19, 1
    1ff2:	40 52       	subi	r20, 0x20	; 32
    1ff4:	41 93       	st	Z+, r20
    1ff6:	02 d0       	rcall	.+4      	; 0x1ffc <__ultoa_invert+0x84>
    1ff8:	a9 f7       	brne	.-22     	; 0x1fe4 <__ultoa_invert+0x6c>
    1ffa:	ea cf       	rjmp	.-44     	; 0x1fd0 <__ultoa_invert+0x58>
    1ffc:	b4 e0       	ldi	r27, 0x04	; 4
    1ffe:	a6 95       	lsr	r26
    2000:	97 95       	ror	r25
    2002:	87 95       	ror	r24
    2004:	77 95       	ror	r23
    2006:	67 95       	ror	r22
    2008:	ba 95       	dec	r27
    200a:	c9 f7       	brne	.-14     	; 0x1ffe <__ultoa_invert+0x86>
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	61 05       	cpc	r22, r1
    2010:	71 05       	cpc	r23, r1
    2012:	08 95       	ret
    2014:	9b 01       	movw	r18, r22
    2016:	ac 01       	movw	r20, r24
    2018:	0a 2e       	mov	r0, r26
    201a:	06 94       	lsr	r0
    201c:	57 95       	ror	r21
    201e:	47 95       	ror	r20
    2020:	37 95       	ror	r19
    2022:	27 95       	ror	r18
    2024:	ba 95       	dec	r27
    2026:	c9 f7       	brne	.-14     	; 0x201a <__ultoa_invert+0xa2>
    2028:	62 0f       	add	r22, r18
    202a:	73 1f       	adc	r23, r19
    202c:	84 1f       	adc	r24, r20
    202e:	95 1f       	adc	r25, r21
    2030:	a0 1d       	adc	r26, r0
    2032:	08 95       	ret

00002034 <__prologue_saves__>:
    2034:	2f 92       	push	r2
    2036:	3f 92       	push	r3
    2038:	4f 92       	push	r4
    203a:	5f 92       	push	r5
    203c:	6f 92       	push	r6
    203e:	7f 92       	push	r7
    2040:	8f 92       	push	r8
    2042:	9f 92       	push	r9
    2044:	af 92       	push	r10
    2046:	bf 92       	push	r11
    2048:	cf 92       	push	r12
    204a:	df 92       	push	r13
    204c:	ef 92       	push	r14
    204e:	ff 92       	push	r15
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	ca 1b       	sub	r28, r26
    205e:	db 0b       	sbc	r29, r27
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	09 94       	ijmp

0000206c <__epilogue_restores__>:
    206c:	2a 88       	ldd	r2, Y+18	; 0x12
    206e:	39 88       	ldd	r3, Y+17	; 0x11
    2070:	48 88       	ldd	r4, Y+16	; 0x10
    2072:	5f 84       	ldd	r5, Y+15	; 0x0f
    2074:	6e 84       	ldd	r6, Y+14	; 0x0e
    2076:	7d 84       	ldd	r7, Y+13	; 0x0d
    2078:	8c 84       	ldd	r8, Y+12	; 0x0c
    207a:	9b 84       	ldd	r9, Y+11	; 0x0b
    207c:	aa 84       	ldd	r10, Y+10	; 0x0a
    207e:	b9 84       	ldd	r11, Y+9	; 0x09
    2080:	c8 84       	ldd	r12, Y+8	; 0x08
    2082:	df 80       	ldd	r13, Y+7	; 0x07
    2084:	ee 80       	ldd	r14, Y+6	; 0x06
    2086:	fd 80       	ldd	r15, Y+5	; 0x05
    2088:	0c 81       	ldd	r16, Y+4	; 0x04
    208a:	1b 81       	ldd	r17, Y+3	; 0x03
    208c:	aa 81       	ldd	r26, Y+2	; 0x02
    208e:	b9 81       	ldd	r27, Y+1	; 0x01
    2090:	ce 0f       	add	r28, r30
    2092:	d1 1d       	adc	r29, r1
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	ed 01       	movw	r28, r26
    20a0:	08 95       	ret

000020a2 <_exit>:
    20a2:	f8 94       	cli

000020a4 <__stop_program>:
    20a4:	ff cf       	rjmp	.-2      	; 0x20a4 <__stop_program>
